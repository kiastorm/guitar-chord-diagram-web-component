{
  "version": 3,
  "sources": ["../src/utils/reef.js", "../src/guitar-chord-diagram.ts"],
  "sourcesContent": ["/*! reef v13.0.2 | (c) 2023 Chris Ferdinandi | MIT License | http://github.com/cferdinandi/reef */\nfunction e(e,t,n=document){let i=new CustomEvent(`chorducate:${e}`,{bubbles:!0,cancelable:!0,detail:t});return n.dispatchEvent(i)}function t(e){return\"string\"==typeof e?document.querySelector(e):e}function n(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}function i(t,r){let o=\"signal\"+(t?`-${t}`:\"\");return{get:(e,r)=>\"_isSignal\"===r||([\"object\",\"array\"].includes(n(e[r]))&&!e[r]._isSignal&&(e[r]=new Proxy(e[r],i(t))),e[r]),set:(t,n,i)=>(t[n]===i||(t[n]=i,e(o,{prop:n,value:i,action:\"set\"})),!0),deleteProperty:(t,n)=>(delete t[n],e(o,{prop:n,value:t[n],action:\"delete\"}),!0)}}function r(e={},t=\"\"){return e=[\"array\",\"object\"].includes(n(e))?e:{value:e},new Proxy(e,i(t))}class o{constructor(t,n,i=\"\"){let r=\"signal\"+(i?`-${i}`:\"\");Object.defineProperties(this,{value:{get:()=>structuredClone(t),set:()=>!0}});for(let i in n)\"function\"==typeof n[i]&&(this[i]=function(...o){n[i](t,...o),e(r,t)})}}function l(e={},t={},n=\"\"){return new o(e,t,n)}let s,u=[\"input\",\"option\",\"textarea\"],c=[\"value\",\"checked\",\"selected\"],d=[\"checked\",\"selected\"];function a(e){return[\"false\",\"null\",\"undefined\",\"0\",\"-0\",\"NaN\",\"0n\",\"-0n\"].includes(e)}function f(e,t,n,i){if(!t.startsWith(\"on\")||!i)return;if(e[t])return;let r=i[n.split(\"(\")[0]];r&&(e[t]=r)}function h(e,t){let n=t.replace(/\\s+/g,\"\").toLowerCase();return!(![\"src\",\"href\",\"xlink:href\"].includes(e)||!n.includes(\"javascript:\")&&!n.includes(\"data:text/html\"))||(!!(e.startsWith(\"on\")||e.startsWith(\"@on\")||e.startsWith(\"#on\"))||void 0)}function m(e,t,n,i){f(e,t,n,i),h(t,n)||(c.includes(t)&&(e[t]=\"value\"===t?n:\" \"),e.setAttribute(t,n))}function g(e,t){c.includes(t)&&(e[t]=\"\"),e.removeAttribute(t)}function p(e,t){if(1===e.nodeType){for(let{name:n,value:i}of e.attributes){if(h(n,i)){g(e,n),f(e,n,i,t);continue}if(!n.startsWith(\"@\")&&!n.startsWith(\"#\"))continue;let r=n.slice(1);g(e,n),d.includes(r)&&a(i)||m(e,r,i,t)}if(e.childNodes)for(let n of e.childNodes)p(n,t)}}function b(e){return e.childNodes&&e.childNodes.length?null:e.textContent}function y(e,t,n){let i=e.childNodes,r=t.childNodes;(function(e){let t=e.querySelectorAll(\"script\");for(let e of t)e.remove()})(e)||(i.forEach((function(e,o){if(!r[o]){let i=e.cloneNode(!0);return p(i,n),void t.append(i)}if(l=e,s=r[o],\"number\"==typeof l.nodeType&&l.nodeType!==s.nodeType||\"string\"==typeof l.tagName&&l.tagName!==s.tagName||\"string\"==typeof l.id&&l.id&&l.id!==s.id||\"getAttribute\"in l&&\"getAttribute\"in s&&l.getAttribute(\"key\")!==s.getAttribute(\"key\")||\"string\"==typeof l.src&&l.src&&l.src!==s.src){let i=function(e,t){if(1!==e.nodeType)return;let n=e.getAttribute(\"id\"),i=e.getAttribute(\"key\");if(!n||!i)return;let r=n?`#${n}`:`[key=\"${i}\"]`;return t.querySelector(`:scope > ${r}`)}(e,t);if(!i){let t=e.cloneNode(!0);return p(t,n),void r[o].before(t)}r[o].before(i)}var l,s;if(i[o]&&\"hasAttribute\"in i[o]&&i[o].hasAttribute(\"reef-ignore\"))return;if(function(e,t,n){if(1!==e.nodeType)return;let i=e.attributes,r=t.attributes;for(let{name:r,value:o}of i){if(r.startsWith(\"#\"))continue;if(c.includes(r)&&u.includes(e.tagName.toLowerCase()))continue;let i=r.startsWith(\"@\")?r.slice(1):r;d.includes(i)&&a(o)?g(t,i):m(t,i,o,n)}for(let{name:e,value:n}of r)i[e]||c.includes(e)&&u.includes(t.tagName.toLowerCase())||g(t,e)}(e,r[o],n),e.nodeName.includes(\"-\"))return;let f=b(e);if(f&&f!==b(r[o])&&(r[o].textContent=f),e.childNodes.length||!r[o].childNodes.length){if(!r[o].childNodes.length&&e.childNodes.length){let t=document.createDocumentFragment();return y(e,t,n),void r[o].appendChild(t)}e.childNodes.length&&y(e,r[o],n)}else r[o].innerHTML=\"\"})),function(e,t){let n=e.length-t.length;if(!(n<1))for(;n>0;n--)e[e.length-1].remove()}(r,i))}function v(n,i,r){let o=t(n),l=function(e){let t=(new DOMParser).parseFromString(`<body><template>${e}</template></body>`,\"text/html\");return t.body?t.body.firstElementChild.content:document.createElement(\"body\")}(i);e(\"before-render\",null,o)&&(y(l,o,r),e(\"render\",null,o))}class N{constructor(e,t,n){var i;this.elem=e,this.template=t,this.signals=n.signals?n.signals.map((e=>`chorducate:signal-${e}`)):[\"chorducate:signal\"],this.events=n.events,this.handler=(i=this,function(e){i.render()}),this.debounce=null,this.start()}start(){for(let e of this.signals)document.addEventListener(e,this.handler);this.render(),e(\"start\",null,t(this.elem))}stop(){for(let e of this.signals)document.removeEventListener(e,this.handler);e(\"stop\",null,t(this.elem))}render(){let e=this;e.debounce&&window.cancelAnimationFrame(e.debounce),e.debounce=window.requestAnimationFrame((function(){v(e.elem,e.template(),e.events)}))}}function w(e,t,n={}){return new N(e,t,n)}function A(){setTimeout((function(){let e=document.querySelector(s);s=null,e&&(e.focus(),document.activeElement!==e&&(e.setAttribute(\"tabindex\",-1),e.focus()))}),1)}function x(e){e&&\"string\"==typeof e&&(s=e,document.addEventListener(\"chorducate:render\",A,{once:!0}))}export{w as component,x as focus,v as render,r as signal,l as store};\n//# sourceMappingURL=reef.es.min.js.map\n", "// @ts-nocheck\n\nimport { component, store } from \"./utils/reef\";\n\nconst DEFAULT_STATE = {\n  amountOfFrets: 4,\n  frets: [0, 0, 0, 0, 0, 3],\n  fingers: [1, 1, 1, 1, 1, 1],\n  barres: [],\n  capo: false,\n  baseFret: 1,\n  midi: [40, 45, 50, 55, 59, 64],\n  strings: 6,\n  tuning: [\"E2\", \"A2\", \"D3\", \"G3\", \"B3\", \"E4\"],\n};\n\nconst compareArrays = (a, b) => {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\ntype State = {\n  amountOfFrets: number;\n  frets: number[];\n  fingers: number[];\n  barres: number[];\n  capo: boolean;\n  baseFret: number;\n  midi: number[];\n  strings: number;\n  tuning: string[];\n};\n\n// Define the type NumberOfStrings for better type checking\ntype NumberOfStrings = 4 | 6;\n\nexport type Chord = {\n  frets: number[];\n  fingers: number[];\n  baseFret: number;\n  barres: number[];\n  midi: number[];\n  strings: NumberOfStrings;\n  amountOfFrets: number;\n  capo: boolean;\n};\n\nconst splitArray = (value: string | null) => {\n  if (!value) return null;\n  return value.split(\",\");\n};\n\nconst parseIntArray = (value: string[]) => {\n  return value.map((v) => parseInt(v));\n};\n\nclass GuitarChordDiagram extends HTMLElement {\n  // Shadow DOM\n  private shadow: ShadowRoot;\n  private isInitialising = true;\n  private dragStart: { string: number; fret: number } | null = null;\n\n  // Reflective properties\n\n  private radius = {\n    open: 2,\n    fret: 4,\n  };\n\n  static get formAssociated() {\n    return true;\n  }\n\n  private _internals: ElementInternals;\n\n  FRET_POSITIONS: Array<number>;\n  FINGER_POSITIONS: Array<number>;\n\n  positions: {\n    string: Array<number>;\n    fret: Array<number>;\n    finger: Array<number>;\n  };\n\n  state: State;\n\n  TRANSLATE_OFFSET = 13;\n  DOT_DIAMETER = 8.25;\n  DOT_RADIUS = this.DOT_DIAMETER / 2;\n  STROKE_WIDTH = 0.25;\n\n  fretXPosition = {\n    4: [10, 20, 30, 40, 50],\n    6: [0, 10, 20, 30, 40, 50],\n  };\n\n  TUNING_FONT_SIZE = 3;\n  FRET_HEIGHT = 16;\n  FRET_Y_CENTER = this.DOT_RADIUS - this.STROKE_WIDTH;\n\n  fretYPosition = [\n    this.FRET_Y_CENTER,\n    this.FRET_HEIGHT + this.FRET_Y_CENTER,\n    2 * this.FRET_HEIGHT + this.FRET_Y_CENTER,\n    3 * this.FRET_HEIGHT + this.FRET_Y_CENTER,\n  ];\n\n  offset = {\n    4: 0,\n    6: -1,\n  };\n\n  offsets = {\n    4: {\n      x: 10,\n      y: 10,\n      length: 40,\n    },\n    6: {\n      x: 0,\n      y: 0,\n      length: 50,\n    },\n  };\n\n  getStringPositionDot = (string: number, strings: NumberOfStrings) =>\n    this.positions.string[string + this.offset[strings]];\n\n  getStringPosition = (string: number, strings: NumberOfStrings) =>\n    this.positions.string[string + this.offset[strings]];\n\n  onlyBarres = (frets: Array<number>, barre: number) =>\n    frets\n      .map((f, index) => ({ position: index, value: f }))\n      .filter((f) => f.value === barre);\n\n  parseIntArrayString = (value: string | null) => {\n    if (!value) return null;\n    return value.split(\",\").map((v) => parseInt(v));\n  };\n\n  stringifyIntArray = (value: number[] | null) => {\n    if (!value) return null;\n    return value.join(\",\");\n  };\n\n  parseBoolean = (value: string | null) => {\n    return value === \"true\";\n  };\n\n  stringifyBoolean = (value: boolean | null) => {\n    return value.toString();\n  };\n\n  stringifyStringArray = (value: string[] | null) => {\n    if (!value) return null;\n    return value.join(\",\");\n  };\n\n  parseStringArray = (value: string | null) => {\n    if (!value) return null;\n    return value.split(\",\");\n  };\n\n  getIntArrayAttribute = (attrName: string) => {\n    return this.parseIntArrayString(this.getAttribute(attrName));\n  };\n\n  getStringArrayAttribute = (attrName: string) => {\n    return this.parseStringArray(this.getAttribute(attrName));\n  };\n\n  getBooleanAttribute = (attrName: string) => {\n    return this.hasAttribute(attrName);\n  };\n\n  getNumberAttribute = (attrName: string) => {\n    return parseInt(this.getAttribute(attrName) as string);\n  };\n\n  setDefaultAttributes = () => {};\n\n  constructor() {\n    super();\n\n    this._internals = this.attachInternals();\n\n    this.shadow = this.attachShadow({ mode: \"open\" });\n\n    this.name = this.getAttribute(\"name\");\n\n    if (!this.getAttribute(\"amount-of-frets\")) {\n      this.setAttribute(\n        \"amount-of-frets\",\n        DEFAULT_STATE[\"amountOfFrets\"].toString()\n      );\n    }\n\n    if (!this.getAttribute(\"frets\")) {\n      this.setAttribute(\n        \"frets\",\n        this.stringifyIntArray(DEFAULT_STATE[\"frets\"])\n      );\n    }\n\n    if (!this.getAttribute(\"fingers\")) {\n      this.setAttribute(\n        \"fingers\",\n        this.stringifyIntArray(DEFAULT_STATE[\"fingers\"])\n      );\n    }\n\n    if (!this.getAttribute(\"base-fret\")) {\n      this.setAttribute(\"base-fret\", DEFAULT_STATE[\"baseFret\"].toString());\n    }\n\n    if (!this.getAttribute(\"midi\")) {\n      this.setAttribute(\"midi\", this.stringifyIntArray(DEFAULT_STATE[\"midi\"]));\n    }\n\n    if (!this.getAttribute(\"strings\")) {\n      this.setAttribute(\"strings\", DEFAULT_STATE[\"strings\"].toString());\n    }\n\n    if (!this.getAttribute(\"tuning\")) {\n      this.setAttribute(\n        \"tuning\",\n        this.stringifyStringArray(DEFAULT_STATE[\"tuning\"])\n      );\n    }\n\n    this.state = store(\n      {\n        amountOfFrets: this.getNumberAttribute(\"amount-of-frets\"),\n        frets: this.getIntArrayAttribute(\"frets\"),\n        fingers: this.getIntArrayAttribute(\"fingers\"),\n        barres: this.getIntArrayAttribute(\"barres\") || [],\n        capo: this.getBooleanAttribute(\"capo\"),\n        baseFret: this.getNumberAttribute(\"base-fret\"),\n        midi: this.getIntArrayAttribute(\"midi\"),\n        strings: this.getNumberAttribute(\"strings\"),\n        tuning: this.getStringArrayAttribute(\"tuning\"),\n      },\n      {\n        setAmountOfFrets: (state, value: number) => {\n          const validatedValue = Number(value); // Ensure it's a number\n          const fretsLargerThanAmountOfFrets = state.frets.filter(\n            (f) => f > validatedValue\n          );\n\n          let finalValue = validatedValue;\n\n          if (validatedValue < 1) {\n            finalValue = 1;\n          } else if (validatedValue > 24) {\n            finalValue = 24;\n          } else if (Number.isNaN(validatedValue)) {\n            finalValue = DEFAULT_STATE[\"amountOfFrets\"];\n          } else if (fretsLargerThanAmountOfFrets.length > 0) {\n            finalValue = Math.max(...fretsLargerThanAmountOfFrets);\n          }\n\n          state.amountOfFrets = finalValue;\n        },\n\n        setFrets: (state, value: number[]) => {\n          const validatedValue = value.map((v) => Number(v)); // Ensure it's a number\n          let finalValue = validatedValue;\n\n          validatedValue.forEach((v, index) => {\n            if (v > state.amountOfFrets) {\n              finalValue[index] = state.amountOfFrets;\n            } else if (v < -1 || Number.isNaN(v)) {\n              finalValue[index] = -1;\n            }\n          });\n\n          state.frets = finalValue;\n\n          // Update barres - Remove any barres that are no longer valid\n          state.barres = state.barres.filter((barre) =>\n            state.frets.includes(barre)\n          );\n        },\n\n        setFingers: (state, value: number[]) => {\n          const validatedValue = value.map((v) => Number(v)); // Ensure it's a number\n\n          if (\n            !validatedValue.some((v) => Number.isNaN(v)) &&\n            validatedValue.every((v) => v >= 0 && v <= 4)\n          ) {\n            state.fingers = validatedValue;\n          } else {\n            throw new RangeError(\"Invalid fingers: \" + value);\n          }\n        },\n\n        setBarres: (state, value: number[]) => {\n          if (!value) {\n            state.barres = [];\n            return;\n          }\n          const validatedValue = value.map((v) => Number(v)); // Ensure it's a number\n\n          if (\n            !validatedValue.some((v) => Number.isNaN(v)) &&\n            validatedValue.every((v) => v >= 1 && v <= this.amountOfFrets)\n          ) {\n            state.barres = validatedValue;\n          } else {\n            throw new RangeError(\"Invalid barres: \" + value);\n          }\n        },\n\n        setCapo: (state, value: boolean) => {\n          state.capo = value;\n\n          if (value) {\n          } else {\n            this.removeAttribute(\"capo\");\n          }\n        },\n\n        setBaseFret: (state, value: number) => {\n          const validatedValue = Number(value); // Ensure it's a number\n\n          if (\n            !Number.isNaN(validatedValue) &&\n            validatedValue >= 1 &&\n            validatedValue <= 24\n          ) {\n            state.baseFret = validatedValue;\n          } else {\n            throw new RangeError(\"Invalid base fret: \" + value);\n          }\n        },\n\n        setMidi: (state, value: number[]) => {\n          const validatedValue = value.map((v) => Number(v)); // Ensure it's a number\n\n          if (\n            !validatedValue.some((v) => Number.isNaN(v)) &&\n            validatedValue.every((v) => v >= 0 && v <= 127)\n          ) {\n            state.midi = validatedValue;\n          } else {\n            throw new RangeError(\"Invalid midi: \" + value);\n          }\n        },\n\n        setStrings: (state, value: number) => {\n          const validatedValue = Number(value); // Ensure it's a number\n\n          if (validatedValue === 4 || validatedValue === 6) {\n            state.strings = validatedValue;\n          } else {\n            throw new RangeError(\"Invalid strings: \" + value);\n          }\n        },\n\n        setTuning: (state, value: string[]) => {\n          if (value.length !== this.strings) {\n            throw new RangeError(\n              `Invalid tuning: ${value}. Should be length ${this.strings}`\n            );\n          }\n\n          state.tuning = value;\n        },\n      },\n      \"chord\"\n    );\n\n    this._internals.setFormValue(this.value);\n    // @ts-ignore\n    this.FRET_POSITIONS = new Array(this.state.value.amountOfFrets + 1)\n      .fill(0)\n      .map((_, index) => {\n        const offset = 0.5;\n        if (index === 0) return this.FRET_HEIGHT * (0.3 * -1);\n        return this.FRET_HEIGHT * (offset + index - 1);\n      });\n\n    this.FINGER_POSITIONS = this.FRET_POSITIONS.map(\n      (fret) => fret + this.TUNING_FONT_SIZE / 2\n    );\n\n    this.positions = {\n      string: [50, 40, 30, 20, 10, 0],\n      fret: this.FRET_POSITIONS,\n      finger: this.FINGER_POSITIONS,\n    };\n  }\n\n  connectedCallback() {\n    this.isInitialising = false;\n\n    component(this.shadowRoot, this.template, {\n      signals: [\"chord\"],\n    });\n\n    this.shadowRoot?.addEventListener(\"mousedown\", this.handleMouseDown);\n    this.shadowRoot?.addEventListener(\"mouseup\", this.handleMouseUp);\n  }\n\n  static get observedAttributes() {\n    return [\n      \"amount-of-frets\",\n      \"frets\",\n      \"fingers\",\n      \"barres\",\n      \"capo\",\n      \"base-fret\",\n      \"strings\",\n      \"tuning\",\n    ];\n  }\n\n  get name() {\n    return this.getAttribute(\"name\");\n  }\n\n  set name(val) {\n    this.setAttribute(\"name\", val || \"\");\n  }\n\n  // Value property to integrate with form data\n  get value() {\n    // Should return a string that represents all the values\n    // For example, JSON representation\n    return JSON.stringify(this.state.value);\n  }\n\n  set value(val) {\n    // Should set all the values based on the string representation\n    // For example, JSON representation\n    const parsedValue = JSON.parse(val);\n\n    this.state.setAmountOfFrets(parsedValue.amountOfFrets);\n    this.state.setFrets(parsedValue.frets);\n    this.state.setFingers(parsedValue.fingers);\n    this.state.setBarres(parsedValue.barres);\n    this.state.setCapo(parsedValue.capo);\n    this.state.setBaseFret(parsedValue.baseFret);\n    this.state.setMidi(parsedValue.midi);\n    this.state.setStrings(parsedValue.strings);\n    this.state.setTuning(parsedValue.tuning);\n  }\n\n  // Custom form validation\n  checkValidity() {\n    // Your validation logic here\n    return true; // return false if invalid\n  }\n\n  reportValidity() {\n    // Your reporting logic here\n    const valid = this.checkValidity();\n    if (!valid) {\n      // Show an error message\n    }\n    return valid;\n  }\n\n  // Define getters and setters for properties\n  get amountOfFrets(): typeof this.state.amountOfFrets {\n    return this.state.value.amountOfFrets;\n  }\n\n  set amountOfFrets(val: typeof this.state.amountOfFrets) {\n    this.setAttribute(\"amount-of-frets\", val.toString());\n    this._internals.setFormValue(this.value);\n  }\n\n  get frets() {\n    return this.state.value.frets;\n  }\n\n  set frets(val) {\n    this.setAttribute(\"frets\", val.join(\",\"));\n    this._internals.setFormValue(this.value);\n  }\n\n  get fingers() {\n    return this.state.value.fingers;\n  }\n\n  set fingers(val) {\n    this.setAttribute(\"fingers\", val.join(\",\"));\n    this._internals.setFormValue(this.value);\n  }\n\n  get barres() {\n    return this.state.value.barres;\n  }\n\n  set barres(val) {\n    if (!val || val.length === 0) {\n      this.removeAttribute(\"barres\");\n    } else {\n      this.setAttribute(\"barres\", val.join(\",\"));\n    }\n    this._internals.setFormValue(this.value);\n  }\n\n  get capo() {\n    return this.state.value.capo;\n  }\n\n  set capo(val) {\n    if (val) {\n      this.setAttribute(\"capo\", \"\");\n    } else {\n      this.removeAttribute(\"capo\");\n    }\n    this._internals.setFormValue(this.value);\n  }\n\n  get baseFret() {\n    return this.state.value.baseFret;\n  }\n\n  set baseFret(val) {\n    this.setAttribute(\"base-fret\", val.toString());\n    this._internals.setFormValue(this.value);\n  }\n\n  get midi() {\n    return this.state.value.midi;\n  }\n\n  set midi(val) {\n    this.setAttribute(\"midi\", val.join(\",\"));\n    this._internals.setFormValue(this.value);\n  }\n\n  get strings() {\n    return this.state.value.strings;\n  }\n\n  set strings(val) {\n    this.setAttribute(\"strings\", val.toString());\n    this._internals.setFormValue(this.value);\n  }\n\n  get tuning() {\n    return this.state.value.tuning;\n  }\n\n  set tuning(val) {\n    this.setAttribute(\"tuning\", val.join(\",\"));\n    this._internals.setFormValue(this.value);\n  }\n\n  getNeckHorizonalLine = (pos: number) => {\n    return `M ${this.offsets[this.strings].x} ${this.FRET_HEIGHT * pos} H ${\n      this.offsets[this.strings].length\n    }`;\n  };\n\n  getNeckVerticalLine = (pos: number) =>\n    `M ${this.offsets[this.strings].y + pos * 10} 0 V ${\n      this.amountOfFrets * this.FRET_HEIGHT\n    }`;\n\n  getNeckPath = () => {\n    return [...Array(this.amountOfFrets + 1)]\n      .map((_, pos) => this.getNeckHorizonalLine(pos))\n      .join(\" \")\n      .concat(\n        [...Array(this.strings)]\n          .map((_, pos) => this.getNeckVerticalLine(pos))\n          .join(\" \")\n      );\n  };\n\n  getBarreOffset = (\n    amountOfStrings: NumberOfStrings,\n    frets: Array<number>,\n    baseFret: number,\n    showCapo?: boolean\n  ) => {\n    if (amountOfStrings === 6) {\n      if (frets[0] === 1 || showCapo) {\n        // Move over to make space for dot or capo\n        return baseFret > 9 ? -12 : -8;\n      } else {\n        return baseFret > 9 ? -10 : -7;\n      }\n    }\n\n    return -10;\n  };\n\n  onlyDots = () =>\n    this.frets\n      // @ts-expect-error\n      .map((f, index) => ({ position: index, value: f }))\n      // @ts-expect-error\n      .filter((f) => !this.barres || this.barres.indexOf(f.value) === -1);\n\n  setReflectiveAttribute(attrName: string, defaultValue: string | null) {\n    const existingAttribute = this.getAttribute(attrName);\n\n    if (existingAttribute) return;\n\n    this.setAttribute(attrName, defaultValue);\n  }\n\n  attributeChangedCallback(attrName: string, oldVal: string, newVal: string) {\n    if (oldVal === newVal || this.isInitialising) return;\n\n    switch (attrName) {\n      case \"amount-of-frets\":\n        this.state.setAmountOfFrets(parseInt(newVal));\n        break;\n      case \"frets\":\n        this.state.setFrets(this.parseIntArrayString(newVal));\n        break;\n      case \"fingers\":\n        this.state.setFingers(this.parseIntArrayString(newVal));\n        break;\n      case \"barres\":\n        this.state.setBarres(this.parseIntArrayString(newVal));\n        break;\n      case \"capo\":\n        this.state.setCapo(newVal !== null);\n        break;\n      case \"base-fret\":\n        this.state.setBaseFret(parseInt(newVal));\n        break;\n      case \"strings\":\n        this.state.setStrings(parseInt(newVal));\n        break;\n      case \"tuning\":\n        this.state.setTuning(splitArray(newVal));\n        break;\n    }\n  }\n\n  template = () => {\n    return `\n    <svg\n      width=\"100%\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      preserveAspectRatio=\"xMinYMin meet\"\n      viewBox=\"0 0 75 ${34 + this.FRET_HEIGHT * this.amountOfFrets}\"\n      style=\"border: 1px solid #ccc;user-select: none;\"\n      \n    >\n      <g transform=\"translate(${this.TRANSLATE_OFFSET}, ${\n      this.TRANSLATE_OFFSET\n    })\">\n        ${this.renderNeck()}\n        ${this.renderBarre()}\n        ${this.renderDot()}\n      </g>\n    </svg>\n  `;\n  };\n\n  renderNeck = () => `\n    <g>\n      <path\n        stroke=\"#444\"\n        stroke-width=\".25\"\n        stroke-linecap=\"square\"\n        stroke-linejoin=\"miter\"\n        d=\"${this.getNeckPath()}\"\n      ></path>\n      ${\n        this.baseFret === 1\n          ? this.renderCapoBaseFret()\n          : this.renderBaseFretText()\n      }\n      ${this.renderTuning()}\n    </g>\n  `;\n\n  renderCapoBaseFret = () => {\n    return `\n    <path\n      stroke=\"#444\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      d=\"M ${this.offsets[this.strings].x} 0 H ${\n      this.offsets[this.strings].length\n    }\"\n    ></path>\n  `;\n  };\n\n  renderBaseFretText = () => `\n    <text\n      font-size=\"${this.TUNING_FONT_SIZE}pt\"\n      fill=\"#444\"\n      font-family=\"Arial\"\n      x=\"${this.getBarreOffset(\n        this.strings,\n        this.frets,\n        this.baseFret,\n        this.capo\n      )}\"\n      y=\"${this.FRET_HEIGHT / 2 + this.TUNING_FONT_SIZE / 2}\"\n    >\n      ${`${this.baseFret}fr`}\n    </text>\n  `;\n\n  renderTuning = () => `\n    <g>\n      ${this.tuning.slice().map(\n        // @ts-expect-error\n        (note, index) => `\n      <text\n        key=\"${note + index}\"\n        font-size=\"0.22rem\"\n        fill=\"#444\"\n        font-family=\"Arial\"\n        text-anchor=\"middle\"\n        x=\"${this.offsets[this.strings].x + index * 10}\"\n        y=\"${this.FRET_HEIGHT * this.amountOfFrets + this.TUNING_FONT_SIZE + 2}\"\n      >\n        ${note}\n      </text>\n      `\n      )}\n    </g>\n  `;\n\n  renderBarre = () => {\n    if (!this.barres) return \"\";\n    // @ts-expect-error\n    return `${this.barres.map((barre, index) =>\n      this.renderSingleBarre(barre, index)\n    )}`;\n  };\n\n  renderSingleBarre = (barre: number, index: number) => {\n    // const finger =\n    //     this.fingers &&\n    //     this.fingers[this.frets.indexOf(barre)];\n    const strings = this.frets.length as NumberOfStrings;\n    const barreFrets = this.onlyBarres(this.frets, barre);\n\n    if (barreFrets.length === 0) return \"\";\n\n    const string1 = barreFrets[0].position;\n    const string2 = barreFrets[barreFrets.length - 1].position;\n    const width = (string2 - string1) * 10;\n    const y = this.fretYPosition[barre - 1];\n\n    return `\n      <g>\n        ${\n          index === 0 && this.capo\n            ? this.renderCapo(this.strings, barreFrets)\n            : \"\"\n        }\n        <rect\n          fill=\"#444\"\n          x=\"${this.fretXPosition[this.strings][string1]}\"\n          y=\"${y}\"\n          width=\"${width}\"\n          height=\"${this.DOT_DIAMETER}\"\n        ></rect>\n      </g>\n    `;\n  };\n\n  renderCapo = (\n    strings: NumberOfStrings,\n    barreFrets: { position: number; value: number }[]\n  ) => `\n    <g>\n      <g\n        transform=\"translate(${this.getStringPosition(\n          this.strings,\n          this.strings\n        )}, ${this.positions.fret[barreFrets[0].value]})\"\n      >\n        <path\n          d=\"M 0, 0 m -4, 0 a 4,4 0 1,1 8,0\"\n          fill=\"#555\"\n          fill-opacity=\"0.2\"\n          transform=\"rotate(-90)\"\n        ></path>\n      </g>\n      <rect\n        fill=\"#555\"\n        x=\"${this.fretXPosition[strings][0]}\"\n        y=\"0\"\n        width=\"${(this.strings - 1) * 10}\"\n        fill-opacity=\"0.2\"\n        height=\"${this.DOT_DIAMETER}\"\n        transform=\"translate(${this.getStringPosition(strings, strings)}, ${\n    this.positions.fret[barreFrets[0].value] - this.DOT_RADIUS\n  })\"\n      ></rect>\n      <g\n        transform=\"translate(${this.getStringPosition(1, strings)}, ${\n    this.positions.fret[barreFrets[0].value]\n  })\"\n      >\n        <path\n          d=\"M 0, 0 m -4, 0 a 4,4 0 1,1 8,0\"\n          fill=\"#555\"\n          fill-opacity=\"0.2\"\n          transform=\"rotate(90)\"\n        ></path>\n      </g>\n    </g>\n  `;\n\n  renderDot = () => {\n    const allDots = (() => {\n      if (!this.barres) return [];\n\n      return [\n        ...this.onlyDots(),\n        ...this.barres\n          // @ts-expect-error\n          .map((barre) => this.onlyBarres(this.frets, barre))\n          .flat(),\n      ].sort((a, b) => a.position - b.position);\n    })();\n\n    const dots = this.shadowRoot.querySelectorAll(\".dot\");\n    dots.forEach((dot) => {\n      dot.addEventListener(\"keydown\", (e) => {\n        const dotIndex = Array.from(dots).indexOf(dot);\n        this.handleDotKeydown(e, dotIndex);\n      });\n    });\n\n    return `\n    ${allDots.map((fret) => {\n      const string = this.strings - fret.position;\n      const finger = this.fingers && this.fingers[fret.position];\n\n      return fret.value === -1\n        ? this.renderMuteDot(string)\n        : this.renderFretDot(fret, string, finger);\n    })}\n  `;\n  };\n\n  renderMuteDot = (string: number) => `\n    <text\n      class=\"dot\"\n      tabindex=\"0\"\n      font-size='5.3pt'\n      fill='#444'\n      font-family='Verdana'\n      text-anchor='middle'\n      x=\"${this.getStringPositionDot(string, this.strings)}\"\n      y='-2.75'\n      >x</text>\n  `;\n\n  renderFretDot = (\n    fret: { position: number; value: number },\n    string: number,\n    finger: number | undefined\n  ) => `\n    <g>\n      <circle\n        class=\"dot\"\n        tabindex=\"0\"\n        stroke-width=\"0.25\"\n        stroke=\"#444\"\n        fill=\"${fret.value === 0 ? \"transparent\" : \"#444\"}\"\n        cx=\"${this.getStringPositionDot(string, this.strings)}\"\n        cy=\"${this.FRET_POSITIONS[fret.value]}\"\n        r=\"${fret.value === 0 ? this.radius.open : this.radius.fret}\"\n      />\n      ${\n        finger && finger > 0\n          ? this.renderFingerNumber(fret, string, finger)\n          : \"\"\n      }\n    </g>\n  `;\n\n  renderFingerNumber = (\n    fret: { position: number; value: number },\n    string: number,\n    finger: number\n  ) => `\n    <text\n      font-size=\"${this.TUNING_FONT_SIZE}pt\"\n      font-family=\"Verdana\"\n      text-anchor=\"middle\"\n      fill=\"white\"\n      x=\"${this.getStringPositionDot(string, this.strings)}\"\n      y=\"${this.FINGER_POSITIONS[fret.value]}\"\n    >\n      ${finger}\n    </text>\n  `;\n\n  changeFret(dotIndex, change) {\n    // dotIndex corresponds to a string in your guitar chord diagram\n    // 'change' is either 1 (increase fret) or -1 (decrease fret)\n\n    // Calculate the new fret value\n    let newFretValue = this.frets[dotIndex] + change;\n\n    // Implement your fret range limits (e.g., 0 to amountOfFrets)\n    newFretValue = Math.max(0, Math.min(newFretValue, this.amountOfFrets));\n\n    // Update the frets array\n    const newFrets = [...this.frets];\n    newFrets[dotIndex] = newFretValue;\n\n    this.frets = newFrets;\n    console.log(newFrets);\n  }\n\n  focusDot(index) {\n    const dots = this.shadowRoot.querySelectorAll(\".dot\");\n    if (dots[index]) {\n      dots[index].focus();\n    }\n  }\n\n  handleDotKeydown(e, dotIndex) {\n    const key = e.key;\n    const totalDots = this.shadowRoot.querySelectorAll(\".dot\").length;\n    let newDotIndex;\n\n    switch (key) {\n      case \"ArrowRight\":\n        newDotIndex = (dotIndex + 1) % totalDots;\n        this.focusDot(newDotIndex);\n        break;\n      case \"ArrowLeft\":\n        newDotIndex = (dotIndex - 1 + totalDots) % totalDots;\n        this.focusDot(newDotIndex);\n        break;\n      case \"ArrowUp\":\n        this.changeFret(dotIndex, -1);\n        break;\n      case \"ArrowDown\":\n        console.log(\"DOWN\");\n        this.changeFret(dotIndex, 1);\n        break;\n    }\n  }\n\n  getClosestString = (x: number) => {\n    const stringPositions = Object.values(this.positions.string).slice(\n      0,\n      this.strings\n    );\n    const closestString = stringPositions.reduce((prev, curr) =>\n      Math.abs(curr + this.TRANSLATE_OFFSET - x) <\n      Math.abs(prev + this.TRANSLATE_OFFSET - x)\n        ? curr\n        : prev\n    );\n    return stringPositions.indexOf(closestString) + 1;\n  };\n\n  getClosestFret = (y: number) => {\n    const fretPositions = Object.values(this.positions.fret).slice(\n      0,\n      this.amountOfFrets + 1\n    );\n    const closestFret = fretPositions.reduce((prev, curr) =>\n      Math.abs(curr + this.TRANSLATE_OFFSET - y) <\n      Math.abs(prev + this.TRANSLATE_OFFSET - y)\n        ? curr\n        : prev\n    );\n    return fretPositions.indexOf(closestFret);\n  };\n\n  handleMouseDown = (e: MouseEvent) => {\n    const svgElement = this.shadowRoot?.querySelector(\"svg\");\n    if (!svgElement) return;\n\n    const pt = svgElement.createSVGPoint();\n    pt.x = e.clientX;\n    pt.y = e.clientY;\n\n    const cursorpt = pt.matrixTransform(svgElement.getScreenCTM()?.inverse());\n    const closestString = this.getClosestString(cursorpt.x);\n    const closestFret = this.getClosestFret(cursorpt.y);\n\n    const stringIndex = this.strings - closestString;\n\n    const newFrets = [...this.frets];\n    const newBarres = new Set(this.barres);\n\n    // Directly update the frets on mousedown\n    if (closestFret === 0) {\n      if (this.frets[stringIndex] === 0) {\n        newFrets[stringIndex] = -1;\n      } else {\n        newFrets[stringIndex] = 0;\n      }\n    } else {\n      newFrets[stringIndex] = closestFret;\n    }\n\n    this.dragStart = {\n      string: stringIndex,\n      fret: closestFret,\n      fretValue: newFrets[stringIndex],\n    };\n\n    this.originalBarres = [...this.barres]; // Store the original barres State\n    this.originalFrets = [...this.frets]; // Store the original frets State\n\n    // Check and remove barres with less than 2 frets on them\n    newBarres.forEach((barre) => {\n      const fretCount = newFrets.filter((fret) => fret === barre).length;\n      if (fretCount < 2) {\n        newBarres.delete(barre);\n      }\n    });\n\n    if (!compareArrays(newFrets, this.frets)) {\n      this.frets = newFrets;\n    }\n\n    if (!compareArrays(Array.from(newBarres), this.barres)) {\n      this.barres = Array.from(newBarres);\n    }\n\n    this.shadowRoot?.addEventListener(\"mousemove\", this.handleMouseMove);\n    document.addEventListener(\"mouseup\", this.handleMouseUp);\n  };\n\n  handleMouseMove = (e: MouseEvent) => {\n    if (!this.dragStart) return;\n\n    const svgElement = this.shadowRoot?.querySelector(\"svg\");\n    if (!svgElement) return;\n\n    const pt = svgElement.createSVGPoint();\n    pt.x = e.clientX;\n    pt.y = e.clientY;\n\n    const cursorpt = pt.matrixTransform(svgElement.getScreenCTM()?.inverse());\n    const currentString = this.getClosestString(cursorpt.x);\n    const currentFret = this.dragStart.fretValue;\n\n    const startStringIndex = this.dragStart.string;\n    const currentStringIndex = this.strings - currentString;\n    const minStringIndex = Math.min(startStringIndex, currentStringIndex);\n    const maxStringIndex = Math.max(startStringIndex, currentStringIndex);\n\n    const newFrets = [...this.originalFrets]; // Start with the original frets\n    const newBarres = new Set(this.originalBarres); // Use a set to manage unique barre values\n\n    // Update frets and potentially add to barres based on drag range\n    for (let i = minStringIndex; i <= maxStringIndex; i++) {\n      newFrets[i] = currentFret;\n      if (\n        startStringIndex !== currentStringIndex &&\n        currentFret !== -1 &&\n        currentFret !== 0\n      ) {\n        newBarres.add(currentFret);\n      }\n    }\n\n    // Check and remove barres with less than 2 frets on them\n    newBarres.forEach((barre) => {\n      const fretCount = newFrets.filter((fret) => fret === barre).length;\n      if (fretCount < 2) {\n        newBarres.delete(barre);\n      }\n    });\n\n    const updatedBarres = Array.from(newBarres);\n\n    // Update state only if there's a change\n    if (!compareArrays(newFrets, this.frets)) {\n      this.frets = newFrets;\n    }\n\n    if (!compareArrays(updatedBarres, this.barres)) {\n      this.barres = updatedBarres;\n    }\n  };\n\n  handleMouseUp = (e: MouseEvent) => {\n    this.shadowRoot?.removeEventListener(\"mousemove\", this.handleMouseMove);\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\n    this.dragStart = null;\n    this.originalFrets = []; // Clear the original frets state\n    this.originalBarres = []; // Clear the original barres state\n  };\n}\n\nwindow.customElements.define(\"guitar-chord-diagram\", GuitarChordDiagram);\n"],
  "mappings": "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",
  "names": ["e", "t", "t", "i", "o", "e", "e", "t", "o", "i", "l", "n", "r", "f", "a", "b", "f", "v", "y", "a", "b", "e"]
}
