{
  "version": 3,
  "sources": ["../src/guitar-chord-diagram.ts", "../src/utils/reef.js"],
  "sourcesContent": ["// @ts-nocheck\n\nimport { component, store } from \"./utils/reef\";\n\nconst DEFAULT_STATE = {\n  amountOfFrets: 4,\n  frets: [0, 0, 0, 0, 0, 0],\n  fingers: [1, 1, 1, 1, 1, 1],\n  barres: [],\n  capo: false,\n  baseFret: 1,\n  midi: [40, 45, 50, 55, 59, 64],\n  strings: 6,\n  tuning: [\"E2\", \"A2\", \"D3\", \"G3\", \"B3\", \"E4\"],\n};\n\nconst compareArrays = (a, b) => {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\ntype State = {\n  amountOfFrets: number;\n  frets: number[];\n  fingers: number[];\n  barres: number[];\n  capo: boolean;\n  baseFret: number;\n  midi: number[];\n  strings: number;\n  tuning: string[];\n};\n\n// Define the type NumberOfStrings for better type checking\ntype NumberOfStrings = 4 | 6;\n\nexport type Chord = {\n  frets: number[];\n  fingers: number[];\n  baseFret: number;\n  barres: number[];\n  midi: number[];\n  strings: NumberOfStrings;\n  amountOfFrets: number;\n  capo: boolean;\n};\n\nconst splitArray = (value: string | null) => {\n  if (!value) return null;\n  return value.split(\",\");\n};\n\nconst parseIntArray = (value: string[]) => {\n  return value.map((v) => parseInt(v));\n};\n\nclass GuitarChordDiagram extends HTMLElement {\n  // Shadow DOM\n  private shadow: ShadowRoot;\n  private isInitialising = true;\n  private dragStart: { string: number; fret: number } | null = null;\n\n  // Reflective properties\n\n  private radius = {\n    open: 2,\n    fret: 4,\n  };\n\n  static get formAssociated() {\n    return true;\n  }\n\n  private _internals: ElementInternals;\n\n  FRET_POSITIONS: Array<number>;\n  FINGER_POSITIONS: Array<number>;\n\n  positions: {\n    string: Array<number>;\n    fret: Array<number>;\n    finger: Array<number>;\n  };\n\n  state: State;\n\n  TRANSLATE_OFFSET = 13;\n  DOT_DIAMETER = 8.25;\n  DOT_RADIUS = this.DOT_DIAMETER / 2;\n  STROKE_WIDTH = 0.25;\n\n  fretXPosition = {\n    4: [10, 20, 30, 40, 50],\n    6: [0, 10, 20, 30, 40, 50],\n  };\n\n  TUNING_FONT_SIZE = 3;\n  FRET_HEIGHT = 16;\n  FRET_Y_CENTER = this.DOT_RADIUS - this.STROKE_WIDTH;\n\n  fretYPosition = [\n    this.FRET_Y_CENTER,\n    this.FRET_HEIGHT + this.FRET_Y_CENTER,\n    2 * this.FRET_HEIGHT + this.FRET_Y_CENTER,\n    3 * this.FRET_HEIGHT + this.FRET_Y_CENTER,\n  ];\n\n  offset = {\n    4: 0,\n    6: -1,\n  };\n\n  offsets = {\n    4: {\n      x: 10,\n      y: 10,\n      length: 40,\n    },\n    6: {\n      x: 0,\n      y: 0,\n      length: 50,\n    },\n  };\n\n  getStringPositionDot = (string: number, strings: NumberOfStrings) =>\n    this.positions.string[string + this.offset[strings]];\n\n  getStringPosition = (string: number, strings: NumberOfStrings) =>\n    this.positions.string[string + this.offset[strings]];\n\n  onlyBarres = (frets: Array<number>, barre: number) =>\n    frets\n      .map((f, index) => ({ position: index, value: f }))\n      .filter((f) => f.value === barre);\n\n  parseIntArrayString = (value: string | null) => {\n    if (!value) return null;\n    return value.split(\",\").map((v) => parseInt(v));\n  };\n\n  stringifyIntArray = (value: number[] | null) => {\n    if (!value) return null;\n    return value.join(\",\");\n  };\n\n  parseBoolean = (value: string | null) => {\n    return value === \"true\";\n  };\n\n  stringifyBoolean = (value: boolean | null) => {\n    return value.toString();\n  };\n\n  stringifyStringArray = (value: string[] | null) => {\n    if (!value) return null;\n    return value.join(\",\");\n  };\n\n  parseStringArray = (value: string | null) => {\n    if (!value) return null;\n    return value.split(\",\");\n  };\n\n  getIntArrayAttribute = (attrName: string) => {\n    return this.parseIntArrayString(this.getAttribute(attrName));\n  };\n\n  getStringArrayAttribute = (attrName: string) => {\n    return this.parseStringArray(this.getAttribute(attrName));\n  };\n\n  getBooleanAttribute = (attrName: string) => {\n    return this.hasAttribute(attrName);\n  };\n\n  getNumberAttribute = (attrName: string) => {\n    return parseInt(this.getAttribute(attrName) as string);\n  };\n\n  setDefaultAttributes = () => {};\n\n  constructor() {\n    super();\n\n    this._internals = this.attachInternals();\n\n    this.shadow = this.attachShadow({ mode: \"open\" });\n\n    this.name = this.getAttribute(\"name\");\n\n    if (!this.getAttribute(\"amount-of-frets\")) {\n      this.setAttribute(\n        \"amount-of-frets\",\n        DEFAULT_STATE[\"amountOfFrets\"].toString()\n      );\n    }\n\n    if (!this.getAttribute(\"frets\")) {\n      this.setAttribute(\n        \"frets\",\n        this.stringifyIntArray(DEFAULT_STATE[\"frets\"])\n      );\n    }\n\n    if (!this.getAttribute(\"fingers\")) {\n      this.setAttribute(\n        \"fingers\",\n        this.stringifyIntArray(DEFAULT_STATE[\"fingers\"])\n      );\n    }\n\n    if (!this.getAttribute(\"base-fret\")) {\n      this.setAttribute(\"base-fret\", DEFAULT_STATE[\"baseFret\"].toString());\n    }\n\n    if (!this.getAttribute(\"midi\")) {\n      this.setAttribute(\"midi\", this.stringifyIntArray(DEFAULT_STATE[\"midi\"]));\n    }\n\n    if (!this.getAttribute(\"strings\")) {\n      this.setAttribute(\"strings\", DEFAULT_STATE[\"strings\"].toString());\n    }\n\n    if (!this.getAttribute(\"tuning\")) {\n      this.setAttribute(\n        \"tuning\",\n        this.stringifyStringArray(DEFAULT_STATE[\"tuning\"])\n      );\n    }\n\n    this.state = store(\n      {\n        amountOfFrets: this.getNumberAttribute(\"amount-of-frets\"),\n        frets: this.getIntArrayAttribute(\"frets\"),\n        fingers: this.getIntArrayAttribute(\"fingers\"),\n        barres: this.getIntArrayAttribute(\"barres\") || [],\n        capo: this.getBooleanAttribute(\"capo\"),\n        baseFret: this.getNumberAttribute(\"base-fret\"),\n        midi: this.getIntArrayAttribute(\"midi\"),\n        strings: this.getNumberAttribute(\"strings\"),\n        tuning: this.getStringArrayAttribute(\"tuning\"),\n      },\n      {\n        setAmountOfFrets: (state, value: number) => {\n          const validatedValue = Number(value); // Ensure it's a number\n          const fretsLargerThanAmountOfFrets = state.frets.filter(\n            (f) => f > validatedValue\n          );\n\n          let finalValue = validatedValue;\n\n          if (validatedValue < 1) {\n            finalValue = 1;\n          } else if (validatedValue > 24) {\n            finalValue = 24;\n          } else if (Number.isNaN(validatedValue)) {\n            finalValue = DEFAULT_STATE[\"amountOfFrets\"];\n          } else if (fretsLargerThanAmountOfFrets.length > 0) {\n            finalValue = Math.max(...fretsLargerThanAmountOfFrets);\n          }\n\n          state.amountOfFrets = finalValue;\n        },\n\n        setFrets: (state, value: number[]) => {\n          const validatedValue = value.map((v) => Number(v)); // Ensure it's a number\n          let finalValue = validatedValue;\n\n          validatedValue.forEach((v, index) => {\n            if (v > state.amountOfFrets) {\n              finalValue[index] = state.amountOfFrets;\n            } else if (v < -1 || Number.isNaN(v)) {\n              finalValue[index] = -1;\n            }\n          });\n\n          state.frets = finalValue;\n\n          // Update barres - Remove any barres that are no longer valid\n          state.barres = state.barres.filter((barre) =>\n            state.frets.includes(barre)\n          );\n        },\n\n        setFingers: (state, value: number[]) => {\n          const validatedValue = value.map((v) => Number(v)); // Ensure it's a number\n\n          if (\n            !validatedValue.some((v) => Number.isNaN(v)) &&\n            validatedValue.every((v) => v >= 0 && v <= 4)\n          ) {\n            state.fingers = validatedValue;\n          } else {\n            throw new RangeError(\"Invalid fingers: \" + value);\n          }\n        },\n\n        setBarres: (state, value: number[]) => {\n          if (!value) {\n            state.barres = [];\n            return;\n          }\n          const validatedValue = value.map((v) => Number(v)); // Ensure it's a number\n\n          if (\n            !validatedValue.some((v) => Number.isNaN(v)) &&\n            validatedValue.every((v) => v >= 1 && v <= this.amountOfFrets)\n          ) {\n            state.barres = validatedValue;\n          } else {\n            throw new RangeError(\"Invalid barres: \" + value);\n          }\n        },\n\n        setCapo: (state, value: boolean) => {\n          state.capo = value;\n\n          if (value) {\n          } else {\n            this.removeAttribute(\"capo\");\n          }\n        },\n\n        setBaseFret: (state, value: number) => {\n          const validatedValue = Number(value); // Ensure it's a number\n\n          if (\n            !Number.isNaN(validatedValue) &&\n            validatedValue >= 1 &&\n            validatedValue <= 24\n          ) {\n            state.baseFret = validatedValue;\n          } else {\n            throw new RangeError(\"Invalid base fret: \" + value);\n          }\n        },\n\n        setMidi: (state, value: number[]) => {\n          const validatedValue = value.map((v) => Number(v)); // Ensure it's a number\n\n          if (\n            !validatedValue.some((v) => Number.isNaN(v)) &&\n            validatedValue.every((v) => v >= 0 && v <= 127)\n          ) {\n            state.midi = validatedValue;\n          } else {\n            throw new RangeError(\"Invalid midi: \" + value);\n          }\n        },\n\n        setStrings: (state, value: number) => {\n          const validatedValue = Number(value); // Ensure it's a number\n\n          if (validatedValue === 4 || validatedValue === 6) {\n            state.strings = validatedValue;\n          } else {\n            throw new RangeError(\"Invalid strings: \" + value);\n          }\n        },\n\n        setTuning: (state, value: string[]) => {\n          if (value.length !== this.strings) {\n            throw new RangeError(\n              `Invalid tuning: ${value}. Should be length ${this.strings}`\n            );\n          }\n\n          state.tuning = value;\n        },\n      },\n      \"chord\"\n    );\n\n    this._internals.setFormValue(this.value);\n    // @ts-ignore\n    this.FRET_POSITIONS = new Array(this.state.value.amountOfFrets + 1)\n      .fill(0)\n      .map((_, index) => {\n        const offset = 0.5;\n        if (index === 0) return this.FRET_HEIGHT * (0.3 * -1);\n        return this.FRET_HEIGHT * (offset + index - 1);\n      });\n\n    this.FINGER_POSITIONS = this.FRET_POSITIONS.map(\n      (fret) => fret + this.TUNING_FONT_SIZE / 2\n    );\n\n    this.positions = {\n      string: [50, 40, 30, 20, 10, 0],\n      fret: this.FRET_POSITIONS,\n      finger: this.FINGER_POSITIONS,\n    };\n  }\n\n  connectedCallback() {\n    this.isInitialising = false;\n\n    component(this.shadowRoot, this.template, {\n      signals: [\"chord\"],\n    });\n\n    this.shadowRoot?.addEventListener(\"mousedown\", this.handleMouseDown);\n    this.shadowRoot?.addEventListener(\"mouseup\", this.handleMouseUp);\n  }\n\n  static get observedAttributes() {\n    return [\n      \"amount-of-frets\",\n      \"frets\",\n      \"fingers\",\n      \"barres\",\n      \"capo\",\n      \"base-fret\",\n      \"strings\",\n      \"tuning\",\n    ];\n  }\n\n  get name() {\n    return this.getAttribute(\"name\");\n  }\n\n  set name(val) {\n    this.setAttribute(\"name\", val || \"\");\n  }\n\n  // Value property to integrate with form data\n  get value() {\n    // Should return a string that represents all the values\n    // For example, JSON representation\n    return JSON.stringify(this.state.value);\n  }\n\n  set value(val) {\n    // Should set all the values based on the string representation\n    // For example, JSON representation\n    const parsedValue = JSON.parse(val);\n\n    this.state.setAmountOfFrets(parsedValue.amountOfFrets);\n    this.state.setFrets(parsedValue.frets);\n    this.state.setFingers(parsedValue.fingers);\n    this.state.setBarres(parsedValue.barres);\n    this.state.setCapo(parsedValue.capo);\n    this.state.setBaseFret(parsedValue.baseFret);\n    this.state.setMidi(parsedValue.midi);\n    this.state.setStrings(parsedValue.strings);\n    this.state.setTuning(parsedValue.tuning);\n  }\n\n  // Custom form validation\n  checkValidity() {\n    // Your validation logic here\n    return true; // return false if invalid\n  }\n\n  reportValidity() {\n    // Your reporting logic here\n    const valid = this.checkValidity();\n    if (!valid) {\n      // Show an error message\n    }\n    return valid;\n  }\n\n  // Define getters and setters for properties\n  get amountOfFrets(): typeof this.state.amountOfFrets {\n    return this.state.value.amountOfFrets;\n  }\n\n  set amountOfFrets(val: typeof this.state.amountOfFrets) {\n    this.setAttribute(\"amount-of-frets\", val.toString());\n    this._internals.setFormValue(this.value);\n  }\n\n  get frets() {\n    return this.state.value.frets;\n  }\n\n  set frets(val) {\n    this.setAttribute(\"frets\", val.join(\",\"));\n    this._internals.setFormValue(this.value);\n  }\n\n  get fingers() {\n    return this.state.value.fingers;\n  }\n\n  set fingers(val) {\n    this.setAttribute(\"fingers\", val.join(\",\"));\n    this._internals.setFormValue(this.value);\n  }\n\n  get barres() {\n    return this.state.value.barres;\n  }\n\n  set barres(val) {\n    if (!val || val.length === 0) {\n      this.removeAttribute(\"barres\");\n    } else {\n      this.setAttribute(\"barres\", val.join(\",\"));\n    }\n    this._internals.setFormValue(this.value);\n  }\n\n  get capo() {\n    return this.state.value.capo;\n  }\n\n  set capo(val) {\n    if (val) {\n      this.setAttribute(\"capo\", \"\");\n    } else {\n      this.removeAttribute(\"capo\");\n    }\n    this._internals.setFormValue(this.value);\n  }\n\n  get baseFret() {\n    return this.state.value.baseFret;\n  }\n\n  set baseFret(val) {\n    this.setAttribute(\"base-fret\", val.toString());\n    this._internals.setFormValue(this.value);\n  }\n\n  get midi() {\n    return this.state.value.midi;\n  }\n\n  set midi(val) {\n    this.setAttribute(\"midi\", val.join(\",\"));\n    this._internals.setFormValue(this.value);\n  }\n\n  get strings() {\n    return this.state.value.strings;\n  }\n\n  set strings(val) {\n    this.setAttribute(\"strings\", val.toString());\n    this._internals.setFormValue(this.value);\n  }\n\n  get tuning() {\n    return this.state.value.tuning;\n  }\n\n  set tuning(val) {\n    this.setAttribute(\"tuning\", val.join(\",\"));\n    this._internals.setFormValue(this.value);\n  }\n\n  getNeckHorizonalLine = (pos: number) => {\n    return `M ${this.offsets[this.strings].x} ${this.FRET_HEIGHT * pos} H ${\n      this.offsets[this.strings].length\n    }`;\n  };\n\n  getNeckVerticalLine = (pos: number) =>\n    `M ${this.offsets[this.strings].y + pos * 10} 0 V ${\n      this.amountOfFrets * this.FRET_HEIGHT\n    }`;\n\n  getNeckPath = () => {\n    return [...Array(this.amountOfFrets + 1)]\n      .map((_, pos) => this.getNeckHorizonalLine(pos))\n      .join(\" \")\n      .concat(\n        [...Array(this.strings)]\n          .map((_, pos) => this.getNeckVerticalLine(pos))\n          .join(\" \")\n      );\n  };\n\n  getBarreOffset = (\n    amountOfStrings: NumberOfStrings,\n    frets: Array<number>,\n    baseFret: number,\n    showCapo?: boolean\n  ) => {\n    if (amountOfStrings === 6) {\n      if (frets[0] === 1 || showCapo) {\n        // Move over to make space for dot or capo\n        return baseFret > 9 ? -12 : -8;\n      } else {\n        return baseFret > 9 ? -10 : -7;\n      }\n    }\n\n    return -10;\n  };\n\n  onlyDots = () =>\n    this.frets\n      // @ts-expect-error\n      .map((f, index) => ({ position: index, value: f }))\n      // @ts-expect-error\n      .filter((f) => !this.barres || this.barres.indexOf(f.value) === -1);\n\n  setReflectiveAttribute(attrName: string, defaultValue: string | null) {\n    const existingAttribute = this.getAttribute(attrName);\n\n    if (existingAttribute) return;\n\n    this.setAttribute(attrName, defaultValue);\n  }\n\n  attributeChangedCallback(attrName: string, oldVal: string, newVal: string) {\n    if (oldVal === newVal || this.isInitialising) return;\n\n    switch (attrName) {\n      case \"amount-of-frets\":\n        this.state.setAmountOfFrets(parseInt(newVal));\n        break;\n      case \"frets\":\n        this.state.setFrets(this.parseIntArrayString(newVal));\n        break;\n      case \"fingers\":\n        this.state.setFingers(this.parseIntArrayString(newVal));\n        break;\n      case \"barres\":\n        this.state.setBarres(this.parseIntArrayString(newVal));\n        break;\n      case \"capo\":\n        this.state.setCapo(newVal !== null);\n        break;\n      case \"base-fret\":\n        this.state.setBaseFret(parseInt(newVal));\n        break;\n      case \"strings\":\n        this.state.setStrings(parseInt(newVal));\n        break;\n      case \"tuning\":\n        this.state.setTuning(splitArray(newVal));\n        break;\n    }\n  }\n\n  template = () => {\n    return `\n    <svg\n      width=\"100%\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      preserveAspectRatio=\"xMinYMin meet\"\n      viewBox=\"0 0 75 ${34 + this.FRET_HEIGHT * this.amountOfFrets}\"\n      style=\"border: 1px solid #ccc;user-select: none;\"\n      \n    >\n      <g transform=\"translate(${this.TRANSLATE_OFFSET}, ${\n      this.TRANSLATE_OFFSET\n    })\">\n        ${this.renderNeck()}\n        ${this.renderBarre()}\n        ${this.renderDot()}\n      </g>\n    </svg>\n  `;\n  };\n\n  renderNeck = () => `\n    <g>\n      <path\n        stroke=\"#444\"\n        stroke-width=\".25\"\n        stroke-linecap=\"square\"\n        stroke-linejoin=\"miter\"\n        d=\"${this.getNeckPath()}\"\n      ></path>\n      ${\n        this.baseFret === 1\n          ? this.renderCapoBaseFret()\n          : this.renderBaseFretText()\n      }\n      ${this.renderTuning()}\n    </g>\n  `;\n\n  renderCapoBaseFret = () => {\n    return `\n    <path\n      stroke=\"#444\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      d=\"M ${this.offsets[this.strings].x} 0 H ${\n      this.offsets[this.strings].length\n    }\"\n    ></path>\n  `;\n  };\n\n  renderBaseFretText = () => `\n    <text\n      font-size=\"${this.TUNING_FONT_SIZE}pt\"\n      fill=\"#444\"\n      font-family=\"Arial\"\n      x=\"${this.getBarreOffset(\n        this.strings,\n        this.frets,\n        this.baseFret,\n        this.capo\n      )}\"\n      y=\"${this.FRET_HEIGHT / 2 + this.TUNING_FONT_SIZE / 2}\"\n    >\n      ${`${this.baseFret}fr`}\n    </text>\n  `;\n\n  renderTuning = () => `\n    <g>\n      ${this.tuning.slice().map(\n        // @ts-expect-error\n        (note, index) => `\n      <text\n        key=\"${note + index}\"\n        font-size=\"0.22rem\"\n        fill=\"#444\"\n        font-family=\"Arial\"\n        text-anchor=\"middle\"\n        x=\"${this.offsets[this.strings].x + index * 10}\"\n        y=\"${this.FRET_HEIGHT * this.amountOfFrets + this.TUNING_FONT_SIZE + 2}\"\n      >\n        ${note}\n      </text>\n      `\n      )}\n    </g>\n  `;\n\n  renderBarre = () => {\n    if (!this.barres) return \"\";\n    // @ts-expect-error\n    return `${this.barres.map((barre, index) =>\n      this.renderSingleBarre(barre, index)\n    )}`;\n  };\n\n  renderSingleBarre = (barre: number, index: number) => {\n    // const finger =\n    //     this.fingers &&\n    //     this.fingers[this.frets.indexOf(barre)];\n    const strings = this.frets.length as NumberOfStrings;\n    const barreFrets = this.onlyBarres(this.frets, barre);\n\n    if (barreFrets.length === 0) return \"\";\n\n    const string1 = barreFrets[0].position;\n    const string2 = barreFrets[barreFrets.length - 1].position;\n    const width = (string2 - string1) * 10;\n    const y = this.fretYPosition[barre - 1];\n\n    return `\n      <g>\n        ${\n          index === 0 && this.capo\n            ? this.renderCapo(this.strings, barreFrets)\n            : \"\"\n        }\n        <rect\n          fill=\"#444\"\n          x=\"${this.fretXPosition[this.strings][string1]}\"\n          y=\"${y}\"\n          width=\"${width}\"\n          height=\"${this.DOT_DIAMETER}\"\n        ></rect>\n      </g>\n    `;\n  };\n\n  renderCapo = (\n    strings: NumberOfStrings,\n    barreFrets: { position: number; value: number }[]\n  ) => `\n    <g>\n      <g\n        transform=\"translate(${this.getStringPosition(\n          this.strings,\n          this.strings\n        )}, ${this.positions.fret[barreFrets[0].value]})\"\n      >\n        <path\n          d=\"M 0, 0 m -4, 0 a 4,4 0 1,1 8,0\"\n          fill=\"#555\"\n          fill-opacity=\"0.2\"\n          transform=\"rotate(-90)\"\n        ></path>\n      </g>\n      <rect\n        fill=\"#555\"\n        x=\"${this.fretXPosition[strings][0]}\"\n        y=\"0\"\n        width=\"${(this.strings - 1) * 10}\"\n        fill-opacity=\"0.2\"\n        height=\"${this.DOT_DIAMETER}\"\n        transform=\"translate(${this.getStringPosition(strings, strings)}, ${\n    this.positions.fret[barreFrets[0].value] - this.DOT_RADIUS\n  })\"\n      ></rect>\n      <g\n        transform=\"translate(${this.getStringPosition(1, strings)}, ${\n    this.positions.fret[barreFrets[0].value]\n  })\"\n      >\n        <path\n          d=\"M 0, 0 m -4, 0 a 4,4 0 1,1 8,0\"\n          fill=\"#555\"\n          fill-opacity=\"0.2\"\n          transform=\"rotate(90)\"\n        ></path>\n      </g>\n    </g>\n  `;\n\n  renderDot = () => {\n    const allDots = (() => {\n      if (!this.barres) return [];\n\n      return [\n        ...this.onlyDots(),\n        ...this.barres\n          // @ts-expect-error\n          .map((barre) => this.onlyBarres(this.frets, barre))\n          .flat(),\n      ].sort((a, b) => a.position - b.position);\n    })();\n\n    const dots = this.shadowRoot.querySelectorAll(\".dot\");\n    dots.forEach((dot) => {\n      dot.addEventListener(\"keydown\", (e) => {\n        const dotIndex = Array.from(dots).indexOf(dot);\n        this.handleDotKeydown(e, dotIndex);\n      });\n    });\n\n    return `\n    ${allDots.map((fret) => {\n      const string = this.strings - fret.position;\n      const finger = this.fingers && this.fingers[fret.position];\n\n      return fret.value === -1\n        ? this.renderMuteDot(string)\n        : this.renderFretDot(fret, string, finger);\n    })}\n  `;\n  };\n\n  renderMuteDot = (string: number) => `\n    <text\n      class=\"dot\"\n      tabindex=\"0\"\n      font-size='5.3pt'\n      fill='#444'\n      font-family='Verdana'\n      text-anchor='middle'\n      x=\"${this.getStringPositionDot(string, this.strings)}\"\n      y='-2.75'\n      >x</text>\n  `;\n\n  renderFretDot = (\n    fret: { position: number; value: number },\n    string: number,\n    finger: number | undefined\n  ) => `\n    <g>\n      <circle\n        class=\"dot\"\n        tabindex=\"0\"\n        stroke-width=\"0.25\"\n        stroke=\"#444\"\n        fill=\"${fret.value === 0 ? \"transparent\" : \"#444\"}\"\n        cx=\"${this.getStringPositionDot(string, this.strings)}\"\n        cy=\"${this.FRET_POSITIONS[fret.value]}\"\n        r=\"${fret.value === 0 ? this.radius.open : this.radius.fret}\"\n      />\n      ${\n        finger && finger > 0\n          ? this.renderFingerNumber(fret, string, finger)\n          : \"\"\n      }\n    </g>\n  `;\n\n  renderFingerNumber = (\n    fret: { position: number; value: number },\n    string: number,\n    finger: number\n  ) => `\n    <text\n      font-size=\"${this.TUNING_FONT_SIZE}pt\"\n      font-family=\"Verdana\"\n      text-anchor=\"middle\"\n      fill=\"white\"\n      x=\"${this.getStringPositionDot(string, this.strings)}\"\n      y=\"${this.FINGER_POSITIONS[fret.value]}\"\n    >\n      ${finger}\n    </text>\n  `;\n\n  changeFret(dotIndex, change) {\n    // dotIndex corresponds to a string in your guitar chord diagram\n    // 'change' is either 1 (increase fret) or -1 (decrease fret)\n\n    // Calculate the new fret value\n    let newFretValue = this.frets[dotIndex] + change;\n\n    // Implement your fret range limits (e.g., 0 to amountOfFrets)\n    newFretValue = Math.max(0, Math.min(newFretValue, this.amountOfFrets));\n\n    // Update the frets array\n    const newFrets = [...this.frets];\n    newFrets[dotIndex] = newFretValue;\n\n    this.frets = newFrets;\n    console.log(newFrets);\n  }\n\n  focusDot(index) {\n    const dots = this.shadowRoot.querySelectorAll(\".dot\");\n    if (dots[index]) {\n      dots[index].focus();\n    }\n  }\n\n  handleDotKeydown(e, dotIndex) {\n    const key = e.key;\n    const totalDots = this.shadowRoot.querySelectorAll(\".dot\").length;\n    let newDotIndex;\n\n    switch (key) {\n      case \"ArrowRight\":\n        newDotIndex = (dotIndex + 1) % totalDots;\n        this.focusDot(newDotIndex);\n        break;\n      case \"ArrowLeft\":\n        newDotIndex = (dotIndex - 1 + totalDots) % totalDots;\n        this.focusDot(newDotIndex);\n        break;\n      case \"ArrowUp\":\n        this.changeFret(dotIndex, -1);\n        break;\n      case \"ArrowDown\":\n        console.log(\"DOWN\");\n        this.changeFret(dotIndex, 1);\n        break;\n    }\n  }\n\n  getClosestString = (x: number) => {\n    const stringPositions = Object.values(this.positions.string).slice(\n      0,\n      this.strings\n    );\n    const closestString = stringPositions.reduce((prev, curr) =>\n      Math.abs(curr + this.TRANSLATE_OFFSET - x) <\n      Math.abs(prev + this.TRANSLATE_OFFSET - x)\n        ? curr\n        : prev\n    );\n    return stringPositions.indexOf(closestString) + 1;\n  };\n\n  getClosestFret = (y: number) => {\n    const fretPositions = Object.values(this.positions.fret).slice(\n      0,\n      this.amountOfFrets + 1\n    );\n    const closestFret = fretPositions.reduce((prev, curr) =>\n      Math.abs(curr + this.TRANSLATE_OFFSET - y) <\n      Math.abs(prev + this.TRANSLATE_OFFSET - y)\n        ? curr\n        : prev\n    );\n    return fretPositions.indexOf(closestFret);\n  };\n\n  handleMouseDown = (e: MouseEvent) => {\n    const svgElement = this.shadowRoot?.querySelector(\"svg\");\n    if (!svgElement) return;\n\n    const pt = svgElement.createSVGPoint();\n    pt.x = e.clientX;\n    pt.y = e.clientY;\n\n    const cursorpt = pt.matrixTransform(svgElement.getScreenCTM()?.inverse());\n    const closestString = this.getClosestString(cursorpt.x);\n    const closestFret = this.getClosestFret(cursorpt.y);\n\n    const stringIndex = this.strings - closestString;\n\n    const newFrets = [...this.frets];\n    const newBarres = new Set(this.barres);\n\n    // Directly update the frets on mousedown\n    if (closestFret === 0) {\n      if (this.frets[stringIndex] === 0) {\n        newFrets[stringIndex] = -1;\n      } else {\n        newFrets[stringIndex] = 0;\n      }\n    } else {\n      newFrets[stringIndex] = closestFret;\n    }\n\n    this.dragStart = {\n      string: stringIndex,\n      fret: closestFret,\n      fretValue: newFrets[stringIndex],\n    };\n\n    this.originalBarres = [...this.barres]; // Store the original barres State\n    this.originalFrets = [...this.frets]; // Store the original frets State\n\n    // Check and remove barres with less than 2 frets on them\n    newBarres.forEach((barre) => {\n      const fretCount = newFrets.filter((fret) => fret === barre).length;\n      if (fretCount < 2) {\n        newBarres.delete(barre);\n      }\n    });\n\n    if (!compareArrays(newFrets, this.frets)) {\n      this.frets = newFrets;\n    }\n\n    if (!compareArrays(Array.from(newBarres), this.barres)) {\n      this.barres = Array.from(newBarres);\n    }\n\n    this.shadowRoot?.addEventListener(\"mousemove\", this.handleMouseMove);\n    document.addEventListener(\"mouseup\", this.handleMouseUp);\n  };\n\n  handleMouseMove = (e: MouseEvent) => {\n    if (!this.dragStart) return;\n\n    const svgElement = this.shadowRoot?.querySelector(\"svg\");\n    if (!svgElement) return;\n\n    const pt = svgElement.createSVGPoint();\n    pt.x = e.clientX;\n    pt.y = e.clientY;\n\n    const cursorpt = pt.matrixTransform(svgElement.getScreenCTM()?.inverse());\n    const currentString = this.getClosestString(cursorpt.x);\n    const currentFret = this.dragStart.fretValue;\n\n    const startStringIndex = this.dragStart.string;\n    const currentStringIndex = this.strings - currentString;\n    const minStringIndex = Math.min(startStringIndex, currentStringIndex);\n    const maxStringIndex = Math.max(startStringIndex, currentStringIndex);\n\n    const newFrets = [...this.originalFrets]; // Start with the original frets\n    const newBarres = new Set(this.originalBarres); // Use a set to manage unique barre values\n\n    // Update frets and potentially add to barres based on drag range\n    for (let i = minStringIndex; i <= maxStringIndex; i++) {\n      newFrets[i] = currentFret;\n      if (\n        startStringIndex !== currentStringIndex &&\n        currentFret !== -1 &&\n        currentFret !== 0\n      ) {\n        newBarres.add(currentFret);\n      }\n    }\n\n    // Check and remove barres with less than 2 frets on them\n    newBarres.forEach((barre) => {\n      const fretCount = newFrets.filter((fret) => fret === barre).length;\n      if (fretCount < 2) {\n        newBarres.delete(barre);\n      }\n    });\n\n    const updatedBarres = Array.from(newBarres);\n\n    // Update state only if there's a change\n    if (!compareArrays(newFrets, this.frets)) {\n      this.frets = newFrets;\n    }\n\n    if (!compareArrays(updatedBarres, this.barres)) {\n      this.barres = updatedBarres;\n    }\n  };\n\n  handleMouseUp = (e: MouseEvent) => {\n    this.shadowRoot?.removeEventListener(\"mousemove\", this.handleMouseMove);\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\n    this.dragStart = null;\n    this.originalFrets = []; // Clear the original frets state\n    this.originalBarres = []; // Clear the original barres state\n  };\n}\n\nwindow.customElements.define(\"guitar-chord-diagram\", GuitarChordDiagram);\n", "/*! reef v13.0.2 | (c) 2023 Chris Ferdinandi | MIT License | http://github.com/cferdinandi/reef */\nfunction e(e,t,n=document){let i=new CustomEvent(`chorducate:${e}`,{bubbles:!0,cancelable:!0,detail:t});return n.dispatchEvent(i)}function t(e){return\"string\"==typeof e?document.querySelector(e):e}function n(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}function i(t,r){let o=\"signal\"+(t?`-${t}`:\"\");return{get:(e,r)=>\"_isSignal\"===r||([\"object\",\"array\"].includes(n(e[r]))&&!e[r]._isSignal&&(e[r]=new Proxy(e[r],i(t))),e[r]),set:(t,n,i)=>(t[n]===i||(t[n]=i,e(o,{prop:n,value:i,action:\"set\"})),!0),deleteProperty:(t,n)=>(delete t[n],e(o,{prop:n,value:t[n],action:\"delete\"}),!0)}}function r(e={},t=\"\"){return e=[\"array\",\"object\"].includes(n(e))?e:{value:e},new Proxy(e,i(t))}class o{constructor(t,n,i=\"\"){let r=\"signal\"+(i?`-${i}`:\"\");Object.defineProperties(this,{value:{get:()=>structuredClone(t),set:()=>!0}});for(let i in n)\"function\"==typeof n[i]&&(this[i]=function(...o){n[i](t,...o),e(r,t)})}}function l(e={},t={},n=\"\"){return new o(e,t,n)}let s,u=[\"input\",\"option\",\"textarea\"],c=[\"value\",\"checked\",\"selected\"],d=[\"checked\",\"selected\"];function a(e){return[\"false\",\"null\",\"undefined\",\"0\",\"-0\",\"NaN\",\"0n\",\"-0n\"].includes(e)}function f(e,t,n,i){if(!t.startsWith(\"on\")||!i)return;if(e[t])return;let r=i[n.split(\"(\")[0]];r&&(e[t]=r)}function h(e,t){let n=t.replace(/\\s+/g,\"\").toLowerCase();return!(![\"src\",\"href\",\"xlink:href\"].includes(e)||!n.includes(\"javascript:\")&&!n.includes(\"data:text/html\"))||(!!(e.startsWith(\"on\")||e.startsWith(\"@on\")||e.startsWith(\"#on\"))||void 0)}function m(e,t,n,i){f(e,t,n,i),h(t,n)||(c.includes(t)&&(e[t]=\"value\"===t?n:\" \"),e.setAttribute(t,n))}function g(e,t){c.includes(t)&&(e[t]=\"\"),e.removeAttribute(t)}function p(e,t){if(1===e.nodeType){for(let{name:n,value:i}of e.attributes){if(h(n,i)){g(e,n),f(e,n,i,t);continue}if(!n.startsWith(\"@\")&&!n.startsWith(\"#\"))continue;let r=n.slice(1);g(e,n),d.includes(r)&&a(i)||m(e,r,i,t)}if(e.childNodes)for(let n of e.childNodes)p(n,t)}}function b(e){return e.childNodes&&e.childNodes.length?null:e.textContent}function y(e,t,n){let i=e.childNodes,r=t.childNodes;(function(e){let t=e.querySelectorAll(\"script\");for(let e of t)e.remove()})(e)||(i.forEach((function(e,o){if(!r[o]){let i=e.cloneNode(!0);return p(i,n),void t.append(i)}if(l=e,s=r[o],\"number\"==typeof l.nodeType&&l.nodeType!==s.nodeType||\"string\"==typeof l.tagName&&l.tagName!==s.tagName||\"string\"==typeof l.id&&l.id&&l.id!==s.id||\"getAttribute\"in l&&\"getAttribute\"in s&&l.getAttribute(\"key\")!==s.getAttribute(\"key\")||\"string\"==typeof l.src&&l.src&&l.src!==s.src){let i=function(e,t){if(1!==e.nodeType)return;let n=e.getAttribute(\"id\"),i=e.getAttribute(\"key\");if(!n||!i)return;let r=n?`#${n}`:`[key=\"${i}\"]`;return t.querySelector(`:scope > ${r}`)}(e,t);if(!i){let t=e.cloneNode(!0);return p(t,n),void r[o].before(t)}r[o].before(i)}var l,s;if(i[o]&&\"hasAttribute\"in i[o]&&i[o].hasAttribute(\"reef-ignore\"))return;if(function(e,t,n){if(1!==e.nodeType)return;let i=e.attributes,r=t.attributes;for(let{name:r,value:o}of i){if(r.startsWith(\"#\"))continue;if(c.includes(r)&&u.includes(e.tagName.toLowerCase()))continue;let i=r.startsWith(\"@\")?r.slice(1):r;d.includes(i)&&a(o)?g(t,i):m(t,i,o,n)}for(let{name:e,value:n}of r)i[e]||c.includes(e)&&u.includes(t.tagName.toLowerCase())||g(t,e)}(e,r[o],n),e.nodeName.includes(\"-\"))return;let f=b(e);if(f&&f!==b(r[o])&&(r[o].textContent=f),e.childNodes.length||!r[o].childNodes.length){if(!r[o].childNodes.length&&e.childNodes.length){let t=document.createDocumentFragment();return y(e,t,n),void r[o].appendChild(t)}e.childNodes.length&&y(e,r[o],n)}else r[o].innerHTML=\"\"})),function(e,t){let n=e.length-t.length;if(!(n<1))for(;n>0;n--)e[e.length-1].remove()}(r,i))}function v(n,i,r){let o=t(n),l=function(e){let t=(new DOMParser).parseFromString(`<body><template>${e}</template></body>`,\"text/html\");return t.body?t.body.firstElementChild.content:document.createElement(\"body\")}(i);e(\"before-render\",null,o)&&(y(l,o,r),e(\"render\",null,o))}class N{constructor(e,t,n){var i;this.elem=e,this.template=t,this.signals=n.signals?n.signals.map((e=>`chorducate:signal-${e}`)):[\"chorducate:signal\"],this.events=n.events,this.handler=(i=this,function(e){i.render()}),this.debounce=null,this.start()}start(){for(let e of this.signals)document.addEventListener(e,this.handler);this.render(),e(\"start\",null,t(this.elem))}stop(){for(let e of this.signals)document.removeEventListener(e,this.handler);e(\"stop\",null,t(this.elem))}render(){let e=this;e.debounce&&window.cancelAnimationFrame(e.debounce),e.debounce=window.requestAnimationFrame((function(){v(e.elem,e.template(),e.events)}))}}function w(e,t,n={}){return new N(e,t,n)}function A(){setTimeout((function(){let e=document.querySelector(s);s=null,e&&(e.focus(),document.activeElement!==e&&(e.setAttribute(\"tabindex\",-1),e.focus()))}),1)}function x(e){e&&\"string\"==typeof e&&(s=e,document.addEventListener(\"chorducate:render\",A,{once:!0}))}export{w as component,x as focus,v as render,r as signal,l as store};\n//# sourceMappingURL=reef.es.min.js.map\n"],
  "mappings": ";+WAAA,IAAAA,EAAA,kBAAAC,EAAAD,GCCA,SAASE,EAAEA,EAAE,EAAEC,EAAE,SAAS,CAAC,IAAIC,EAAE,IAAI,YAAY,cAAcF,CAAC,GAAG,CAAC,QAAQ,GAAG,WAAW,GAAG,OAAO,CAAC,CAAC,EAAE,OAAOC,EAAE,cAAcC,CAAC,CAAC,CAAC,SAASC,EAAEH,EAAE,CAAC,OAAgB,OAAOA,GAAjB,SAAmB,SAAS,cAAcA,CAAC,EAAEA,CAAC,CAAqf,IAAMI,EAAN,KAAO,CAAC,YAAY,EAAEC,EAAEC,EAAE,GAAG,CAAC,IAAI,EAAE,UAAUA,EAAE,IAAIA,CAAC,GAAG,IAAI,OAAO,iBAAiB,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,gBAAgB,CAAC,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC,EAAE,QAAQ,KAAKD,EAAc,OAAOA,EAAE,CAAC,GAAtB,aAA0B,KAAK,CAAC,EAAE,YAAY,EAAE,CAACA,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAEE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAC,SAASC,EAAED,EAAE,CAAC,EAAE,EAAE,CAAC,EAAEF,EAAE,GAAG,CAAC,OAAO,IAAID,EAAEG,EAAE,EAAEF,CAAC,CAAC,CAAC,IAAMI,EAAE,CAAC,QAAQ,SAAS,UAAU,EAAEC,EAAE,CAAC,QAAQ,UAAU,UAAU,EAAEC,EAAE,CAAC,UAAU,UAAU,EAAE,SAASC,EAAEC,EAAE,CAAC,MAAM,CAAC,QAAQ,OAAO,YAAY,IAAI,KAAK,MAAM,KAAK,KAAK,EAAE,SAASA,CAAC,CAAC,CAAC,SAASC,EAAED,EAAE,EAAEE,EAAEC,EAAE,CAAmC,GAA/B,CAAC,EAAE,WAAW,IAAI,GAAG,CAACA,GAAYH,EAAE,CAAC,EAAE,OAAO,IAAI,EAAEG,EAAED,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC,EAAE,IAAIF,EAAE,CAAC,EAAE,EAAE,CAAC,SAASI,EAAEJ,EAAE,EAAE,CAAC,IAAIE,EAAE,EAAE,QAAQ,OAAO,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,OAAO,YAAY,EAAE,SAASF,CAAC,GAAG,CAACE,EAAE,SAAS,aAAa,GAAG,CAACA,EAAE,SAAS,gBAAgB,IAAK,CAAC,EAAEF,EAAE,WAAW,IAAI,GAAGA,EAAE,WAAW,KAAK,GAAGA,EAAE,WAAW,KAAK,IAAI,MAAO,CAAC,SAASK,EAAEL,EAAE,EAAEE,EAAEC,EAAE,CAACF,EAAED,EAAE,EAAEE,EAAEC,CAAC,EAAEC,EAAE,EAAEF,CAAC,IAAIL,EAAE,SAAS,CAAC,IAAIG,EAAE,CAAC,EAAY,IAAV,QAAYE,EAAE,KAAKF,EAAE,aAAa,EAAEE,CAAC,EAAE,CAAC,SAASI,EAAEN,EAAE,EAAE,CAACH,EAAE,SAAS,CAAC,IAAIG,EAAE,CAAC,EAAE,IAAIA,EAAE,gBAAgB,CAAC,CAAC,CAAC,SAASO,EAAEP,EAAE,EAAE,CAAC,GAAOA,EAAE,WAAN,EAAe,CAAC,OAAO,CAAC,KAAKE,EAAE,MAAMC,CAAC,IAAIH,EAAE,WAAW,CAAC,GAAGI,EAAEF,EAAEC,CAAC,EAAE,CAACG,EAAEN,EAAEE,CAAC,EAAED,EAAED,EAAEE,EAAEC,EAAE,CAAC,EAAE,QAAQ,CAAC,GAAG,CAACD,EAAE,WAAW,GAAG,GAAG,CAACA,EAAE,WAAW,GAAG,EAAE,SAAS,IAAI,EAAEA,EAAE,MAAM,CAAC,EAAEI,EAAEN,EAAEE,CAAC,EAAEJ,EAAE,SAAS,CAAC,GAAGC,EAAEI,CAAC,GAAGE,EAAEL,EAAE,EAAEG,EAAE,CAAC,CAAC,CAAC,GAAGH,EAAE,WAAW,QAAQE,KAAKF,EAAE,WAAWO,EAAEL,EAAE,CAAC,CAAC,CAAC,CAAC,SAASM,EAAER,EAAE,CAAC,OAAOA,EAAE,YAAYA,EAAE,WAAW,OAAO,KAAKA,EAAE,WAAW,CAAC,SAASS,EAAET,EAAE,EAAEE,EAAE,CAAC,IAAIC,EAAEH,EAAE,WAAW,EAAE,EAAE,YAAY,SAASA,EAAE,CAAC,IAAIU,EAAEV,EAAE,iBAAiB,QAAQ,EAAE,QAAQA,KAAKU,EAAEV,EAAE,OAAO,CAAC,GAAGA,CAAC,IAAIG,EAAE,QAAS,SAASH,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,IAAIG,EAAEH,EAAE,UAAU,EAAE,EAAE,OAAOO,EAAEJ,EAAED,CAAC,EAAE,KAAK,EAAE,OAAOC,CAAC,CAAC,CAAC,GAAGQ,EAAEX,EAAEY,EAAE,EAAE,CAAC,EAAY,OAAOD,EAAE,UAAnB,UAA6BA,EAAE,WAAWC,EAAE,UAAoB,OAAOD,EAAE,SAAnB,UAA4BA,EAAE,UAAUC,EAAE,SAAmB,OAAOD,EAAE,IAAnB,UAAuBA,EAAE,IAAIA,EAAE,KAAKC,EAAE,IAAI,iBAAiBD,GAAG,iBAAiBC,GAAGD,EAAE,aAAa,KAAK,IAAIC,EAAE,aAAa,KAAK,GAAa,OAAOD,EAAE,KAAnB,UAAwBA,EAAE,KAAKA,EAAE,MAAMC,EAAE,IAAI,CAAC,IAAIT,EAAE,SAASH,EAAEU,EAAE,CAAC,GAAOV,EAAE,WAAN,EAAe,OAAO,IAAIE,EAAEF,EAAE,aAAa,IAAI,EAAEG,EAAEH,EAAE,aAAa,KAAK,EAAE,GAAG,CAACE,GAAG,CAACC,EAAE,OAAO,IAAIU,EAAEX,EAAE,IAAIA,CAAC,GAAG,SAASC,CAAC,KAAK,OAAOO,EAAE,cAAc,YAAYG,CAAC,EAAE,CAAC,EAAEb,EAAE,CAAC,EAAE,GAAG,CAACG,EAAE,CAAC,IAAIO,EAAEV,EAAE,UAAU,EAAE,EAAE,OAAOO,EAAEG,EAAER,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,OAAOQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,OAAOP,CAAC,CAAC,CAAC,IAAIQ,EAAEC,EAA0E,GAArET,EAAE,CAAC,GAAG,iBAAiBA,EAAE,CAAC,GAAGA,EAAE,CAAC,EAAE,aAAa,aAAa,IAAY,SAASH,EAAEU,EAAER,EAAE,CAAC,GAAOF,EAAE,WAAN,EAAe,OAAO,IAAIG,EAAEH,EAAE,WAAWa,EAAEH,EAAE,WAAW,OAAO,CAAC,KAAKG,EAAE,MAAMC,CAAC,IAAIX,EAAE,CAA+B,GAA3BU,EAAE,WAAW,GAAG,GAAchB,EAAE,SAASgB,CAAC,GAAGjB,EAAE,SAASI,EAAE,QAAQ,YAAY,CAAC,EAAE,SAAS,IAAIG,EAAEU,EAAE,WAAW,GAAG,EAAEA,EAAE,MAAM,CAAC,EAAEA,EAAEf,EAAE,SAASK,CAAC,GAAGJ,EAAEe,CAAC,EAAER,EAAEI,EAAEP,CAAC,EAAEE,EAAEK,EAAEP,EAAEW,EAAEZ,CAAC,CAAC,CAAC,OAAO,CAAC,KAAKF,EAAE,MAAME,CAAC,IAAIW,EAAEV,EAAEH,CAAC,GAAGH,EAAE,SAASG,CAAC,GAAGJ,EAAE,SAASc,EAAE,QAAQ,YAAY,CAAC,GAAGJ,EAAEI,EAAEV,CAAC,CAAC,EAAEA,EAAE,EAAE,CAAC,EAAEE,CAAC,EAAEF,EAAE,SAAS,SAAS,GAAG,GAAE,OAAO,IAAIC,EAAEO,EAAER,CAAC,EAAE,GAAGC,GAAGA,IAAIO,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,YAAYP,GAAGD,EAAE,WAAW,QAAQ,CAAC,EAAE,CAAC,EAAE,WAAW,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,WAAW,QAAQA,EAAE,WAAW,OAAO,CAAC,IAAIU,EAAE,SAAS,uBAAuB,EAAE,OAAOD,EAAET,EAAEU,EAAER,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,YAAYQ,CAAC,CAAC,CAACV,EAAE,WAAW,QAAQS,EAAET,EAAE,EAAE,CAAC,EAAEE,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,UAAU,EAAE,CAAE,EAAE,SAASF,EAAEU,EAAE,CAAC,IAAIR,EAAEF,EAAE,OAAOU,EAAE,OAAO,GAAG,EAAER,EAAE,GAAG,KAAKA,EAAE,EAAEA,IAAIF,EAAEA,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC,EAAE,EAAEG,CAAC,EAAE,CAAC,SAASY,EAAE,EAAEZ,EAAEU,EAAE,CAAC,IAAIC,EAAEJ,EAAE,CAAC,EAAEC,EAAE,SAASX,EAAE,CAAC,IAAIU,EAAG,IAAI,YAAW,gBAAgB,mBAAmBV,CAAC,qBAAqB,WAAW,EAAE,OAAOU,EAAE,KAAKA,EAAE,KAAK,kBAAkB,QAAQ,SAAS,cAAc,MAAM,CAAC,EAAEP,CAAC,EAAEH,EAAE,gBAAgB,KAAKc,CAAC,IAAIL,EAAEE,EAAEG,EAAED,CAAC,EAAEb,EAAE,SAAS,KAAKc,CAAC,EAAE,CAAC,IAAME,EAAN,KAAO,CAAC,YAAYhB,EAAEU,EAAER,EAAE,CAAC,IAAIC,EAAE,KAAK,KAAKH,EAAE,KAAK,SAASU,EAAE,KAAK,QAAQR,EAAE,QAAQA,EAAE,QAAQ,IAAKF,GAAG,qBAAqBA,CAAC,EAAG,EAAE,CAAC,mBAAmB,EAAE,KAAK,OAAOE,EAAE,OAAO,KAAK,SAASC,EAAE,KAAK,SAASH,EAAE,CAACG,EAAE,OAAO,CAAC,GAAG,KAAK,SAAS,KAAK,KAAK,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQH,KAAK,KAAK,QAAQ,SAAS,iBAAiBA,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAEA,EAAE,QAAQ,KAAKU,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQV,KAAK,KAAK,QAAQ,SAAS,oBAAoBA,EAAE,KAAK,OAAO,EAAEA,EAAE,OAAO,KAAKU,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAIV,EAAE,KAAKA,EAAE,UAAU,OAAO,qBAAqBA,EAAE,QAAQ,EAAEA,EAAE,SAAS,OAAO,sBAAuB,UAAU,CAACe,EAAEf,EAAE,KAAKA,EAAE,SAAS,EAAEA,EAAE,MAAM,CAAC,CAAE,CAAC,CAAC,EAAC,SAASiB,EAAEjB,EAAE,EAAEE,EAAE,CAAC,EAAE,CAAC,OAAO,IAAIc,EAAEhB,EAAE,EAAEE,CAAC,CAAC,CDG//I,IAAMgB,EAAgB,CACpB,cAAe,EACf,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EACxB,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EAC1B,OAAQ,CAAC,EACT,KAAM,GACN,SAAU,EACV,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAC7B,QAAS,EACT,OAAQ,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,IAAI,CAC7C,EAEMC,EAAgB,CAACC,EAAGC,IACjB,KAAK,UAAUD,CAAC,IAAM,KAAK,UAAUC,CAAC,EA6BzCC,EAAcC,GACbA,EACEA,EAAM,MAAM,GAAG,EADH,KAQrB,IAAMC,EAAN,cAAiC,WAAY,CAEnC,OACA,eAAiB,GACjB,UAAqD,KAIrD,OAAS,CACf,KAAM,EACN,KAAM,CACR,EAEA,WAAW,gBAAiB,CAC1B,MAAO,EACT,CAEQ,WAER,eACA,iBAEA,UAMA,MAEA,iBAAmB,GACnB,aAAe,KACf,WAAa,KAAK,aAAe,EACjC,aAAe,IAEf,cAAgB,CACd,EAAG,CAAC,GAAI,GAAI,GAAI,GAAI,EAAE,EACtB,EAAG,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,EAAE,CAC3B,EAEA,iBAAmB,EACnB,YAAc,GACd,cAAgB,KAAK,WAAa,KAAK,aAEvC,cAAgB,CACd,KAAK,cACL,KAAK,YAAc,KAAK,cACxB,EAAI,KAAK,YAAc,KAAK,cAC5B,EAAI,KAAK,YAAc,KAAK,aAC9B,EAEA,OAAS,CACP,EAAG,EACH,EAAG,EACL,EAEA,QAAU,CACR,EAAG,CACD,EAAG,GACH,EAAG,GACH,OAAQ,EACV,EACA,EAAG,CACD,EAAG,EACH,EAAG,EACH,OAAQ,EACV,CACF,EAEA,qBAAuB,CAACC,EAAgBC,IACtC,KAAK,UAAU,OAAOD,EAAS,KAAK,OAAOC,CAAO,CAAC,EAErD,kBAAoB,CAACD,EAAgBC,IACnC,KAAK,UAAU,OAAOD,EAAS,KAAK,OAAOC,CAAO,CAAC,EAErD,WAAa,CAACC,EAAsBC,IAClCD,EACG,IAAI,CAACE,EAAGC,KAAW,CAAE,SAAUA,EAAO,MAAOD,CAAE,EAAE,EACjD,OAAQA,GAAMA,EAAE,QAAUD,CAAK,EAEpC,oBAAuBG,GAChBA,EACEA,EAAM,MAAM,GAAG,EAAE,IAAKC,GAAM,SAASA,CAAC,CAAC,EAD3B,KAIrB,kBAAqBD,GACdA,EACEA,EAAM,KAAK,GAAG,EADF,KAIrB,aAAgBA,GACPA,IAAU,OAGnB,iBAAoBA,GACXA,EAAM,SAAS,EAGxB,qBAAwBA,GACjBA,EACEA,EAAM,KAAK,GAAG,EADF,KAIrB,iBAAoBA,GACbA,EACEA,EAAM,MAAM,GAAG,EADH,KAIrB,qBAAwBE,GACf,KAAK,oBAAoB,KAAK,aAAaA,CAAQ,CAAC,EAG7D,wBAA2BA,GAClB,KAAK,iBAAiB,KAAK,aAAaA,CAAQ,CAAC,EAG1D,oBAAuBA,GACd,KAAK,aAAaA,CAAQ,EAGnC,mBAAsBA,GACb,SAAS,KAAK,aAAaA,CAAQ,CAAW,EAGvD,qBAAuB,IAAM,CAAC,EAE9B,aAAc,CACZ,MAAM,EAEN,KAAK,WAAa,KAAK,gBAAgB,EAEvC,KAAK,OAAS,KAAK,aAAa,CAAE,KAAM,MAAO,CAAC,EAEhD,KAAK,KAAO,KAAK,aAAa,MAAM,EAE/B,KAAK,aAAa,iBAAiB,GACtC,KAAK,aACH,kBACAC,EAAc,cAAiB,SAAS,CAC1C,EAGG,KAAK,aAAa,OAAO,GAC5B,KAAK,aACH,QACA,KAAK,kBAAkBA,EAAc,KAAQ,CAC/C,EAGG,KAAK,aAAa,SAAS,GAC9B,KAAK,aACH,UACA,KAAK,kBAAkBA,EAAc,OAAU,CACjD,EAGG,KAAK,aAAa,WAAW,GAChC,KAAK,aAAa,YAAaA,EAAc,SAAY,SAAS,CAAC,EAGhE,KAAK,aAAa,MAAM,GAC3B,KAAK,aAAa,OAAQ,KAAK,kBAAkBA,EAAc,IAAO,CAAC,EAGpE,KAAK,aAAa,SAAS,GAC9B,KAAK,aAAa,UAAWA,EAAc,QAAW,SAAS,CAAC,EAG7D,KAAK,aAAa,QAAQ,GAC7B,KAAK,aACH,SACA,KAAK,qBAAqBA,EAAc,MAAS,CACnD,EAGF,KAAK,MAAQC,EACX,CACE,cAAe,KAAK,mBAAmB,iBAAiB,EACxD,MAAO,KAAK,qBAAqB,OAAO,EACxC,QAAS,KAAK,qBAAqB,SAAS,EAC5C,OAAQ,KAAK,qBAAqB,QAAQ,GAAK,CAAC,EAChD,KAAM,KAAK,oBAAoB,MAAM,EACrC,SAAU,KAAK,mBAAmB,WAAW,EAC7C,KAAM,KAAK,qBAAqB,MAAM,EACtC,QAAS,KAAK,mBAAmB,SAAS,EAC1C,OAAQ,KAAK,wBAAwB,QAAQ,CAC/C,EACA,CACE,iBAAkB,CAACC,EAAOL,IAAkB,CAC1C,IAAMM,EAAiB,OAAON,CAAK,EAC7BO,EAA+BF,EAAM,MAAM,OAC9CP,GAAMA,EAAIQ,CACb,EAEIE,EAAaF,EAEbA,EAAiB,EACnBE,EAAa,EACJF,EAAiB,GAC1BE,EAAa,GACJ,OAAO,MAAMF,CAAc,EACpCE,EAAaL,EAAc,cAClBI,EAA6B,OAAS,IAC/CC,EAAa,KAAK,IAAI,GAAGD,CAA4B,GAGvDF,EAAM,cAAgBG,CACxB,EAEA,SAAU,CAACH,EAAOL,IAAoB,CACpC,IAAMM,EAAiBN,EAAM,IAAKC,GAAM,OAAOA,CAAC,CAAC,EAC7CO,EAAaF,EAEjBA,EAAe,QAAQ,CAACL,EAAGF,IAAU,CAC/BE,EAAII,EAAM,cACZG,EAAWT,CAAK,EAAIM,EAAM,eACjBJ,EAAI,IAAM,OAAO,MAAMA,CAAC,KACjCO,EAAWT,CAAK,EAAI,GAExB,CAAC,EAEDM,EAAM,MAAQG,EAGdH,EAAM,OAASA,EAAM,OAAO,OAAQR,GAClCQ,EAAM,MAAM,SAASR,CAAK,CAC5B,CACF,EAEA,WAAY,CAACQ,EAAOL,IAAoB,CACtC,IAAMM,EAAiBN,EAAM,IAAKC,GAAM,OAAOA,CAAC,CAAC,EAEjD,GACE,CAACK,EAAe,KAAML,GAAM,OAAO,MAAMA,CAAC,CAAC,GAC3CK,EAAe,MAAOL,GAAMA,GAAK,GAAKA,GAAK,CAAC,EAE5CI,EAAM,QAAUC,MAEhB,OAAM,IAAI,WAAW,oBAAsBN,CAAK,CAEpD,EAEA,UAAW,CAACK,EAAOL,IAAoB,CACrC,GAAI,CAACA,EAAO,CACVK,EAAM,OAAS,CAAC,EAChB,MACF,CACA,IAAMC,EAAiBN,EAAM,IAAKC,GAAM,OAAOA,CAAC,CAAC,EAEjD,GACE,CAACK,EAAe,KAAML,GAAM,OAAO,MAAMA,CAAC,CAAC,GAC3CK,EAAe,MAAOL,GAAMA,GAAK,GAAKA,GAAK,KAAK,aAAa,EAE7DI,EAAM,OAASC,MAEf,OAAM,IAAI,WAAW,mBAAqBN,CAAK,CAEnD,EAEA,QAAS,CAACK,EAAOL,IAAmB,CAClCK,EAAM,KAAOL,EAETA,GAEF,KAAK,gBAAgB,MAAM,CAE/B,EAEA,YAAa,CAACK,EAAOL,IAAkB,CACrC,IAAMM,EAAiB,OAAON,CAAK,EAEnC,GACE,CAAC,OAAO,MAAMM,CAAc,GAC5BA,GAAkB,GAClBA,GAAkB,GAElBD,EAAM,SAAWC,MAEjB,OAAM,IAAI,WAAW,sBAAwBN,CAAK,CAEtD,EAEA,QAAS,CAACK,EAAOL,IAAoB,CACnC,IAAMM,EAAiBN,EAAM,IAAKC,GAAM,OAAOA,CAAC,CAAC,EAEjD,GACE,CAACK,EAAe,KAAML,GAAM,OAAO,MAAMA,CAAC,CAAC,GAC3CK,EAAe,MAAOL,GAAMA,GAAK,GAAKA,GAAK,GAAG,EAE9CI,EAAM,KAAOC,MAEb,OAAM,IAAI,WAAW,iBAAmBN,CAAK,CAEjD,EAEA,WAAY,CAACK,EAAOL,IAAkB,CACpC,IAAMM,EAAiB,OAAON,CAAK,EAEnC,GAAIM,IAAmB,GAAKA,IAAmB,EAC7CD,EAAM,QAAUC,MAEhB,OAAM,IAAI,WAAW,oBAAsBN,CAAK,CAEpD,EAEA,UAAW,CAACK,EAAOL,IAAoB,CACrC,GAAIA,EAAM,SAAW,KAAK,QACxB,MAAM,IAAI,WACR,mBAAmBA,CAAK,sBAAsB,KAAK,OAAO,EAC5D,EAGFK,EAAM,OAASL,CACjB,CACF,EACA,OACF,EAEA,KAAK,WAAW,aAAa,KAAK,KAAK,EAEvC,KAAK,eAAiB,IAAI,MAAM,KAAK,MAAM,MAAM,cAAgB,CAAC,EAC/D,KAAK,CAAC,EACN,IAAI,CAACS,EAAGV,IAEHA,IAAU,EAAU,KAAK,aAAe,GAAM,IAC3C,KAAK,aAAe,GAASA,EAAQ,EAC7C,EAEH,KAAK,iBAAmB,KAAK,eAAe,IACzCW,GAASA,EAAO,KAAK,iBAAmB,CAC3C,EAEA,KAAK,UAAY,CACf,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,CAAC,EAC9B,KAAM,KAAK,eACX,OAAQ,KAAK,gBACf,CACF,CAEA,mBAAoB,CAClB,KAAK,eAAiB,GAEtBC,EAAU,KAAK,WAAY,KAAK,SAAU,CACxC,QAAS,CAAC,OAAO,CACnB,CAAC,EAED,KAAK,YAAY,iBAAiB,YAAa,KAAK,eAAe,EACnE,KAAK,YAAY,iBAAiB,UAAW,KAAK,aAAa,CACjE,CAEA,WAAW,oBAAqB,CAC9B,MAAO,CACL,kBACA,QACA,UACA,SACA,OACA,YACA,UACA,QACF,CACF,CAEA,IAAI,MAAO,CACT,OAAO,KAAK,aAAa,MAAM,CACjC,CAEA,IAAI,KAAKC,EAAK,CACZ,KAAK,aAAa,OAAQA,GAAO,EAAE,CACrC,CAGA,IAAI,OAAQ,CAGV,OAAO,KAAK,UAAU,KAAK,MAAM,KAAK,CACxC,CAEA,IAAI,MAAMA,EAAK,CAGb,IAAMC,EAAc,KAAK,MAAMD,CAAG,EAElC,KAAK,MAAM,iBAAiBC,EAAY,aAAa,EACrD,KAAK,MAAM,SAASA,EAAY,KAAK,EACrC,KAAK,MAAM,WAAWA,EAAY,OAAO,EACzC,KAAK,MAAM,UAAUA,EAAY,MAAM,EACvC,KAAK,MAAM,QAAQA,EAAY,IAAI,EACnC,KAAK,MAAM,YAAYA,EAAY,QAAQ,EAC3C,KAAK,MAAM,QAAQA,EAAY,IAAI,EACnC,KAAK,MAAM,WAAWA,EAAY,OAAO,EACzC,KAAK,MAAM,UAAUA,EAAY,MAAM,CACzC,CAGA,eAAgB,CAEd,MAAO,EACT,CAEA,gBAAiB,CAEf,IAAMC,EAAQ,KAAK,cAAc,EAIjC,OAAOA,CACT,CAGA,IAAI,eAAiD,CACnD,OAAO,KAAK,MAAM,MAAM,aAC1B,CAEA,IAAI,cAAcF,EAAsC,CACtD,KAAK,aAAa,kBAAmBA,EAAI,SAAS,CAAC,EACnD,KAAK,WAAW,aAAa,KAAK,KAAK,CACzC,CAEA,IAAI,OAAQ,CACV,OAAO,KAAK,MAAM,MAAM,KAC1B,CAEA,IAAI,MAAMA,EAAK,CACb,KAAK,aAAa,QAASA,EAAI,KAAK,GAAG,CAAC,EACxC,KAAK,WAAW,aAAa,KAAK,KAAK,CACzC,CAEA,IAAI,SAAU,CACZ,OAAO,KAAK,MAAM,MAAM,OAC1B,CAEA,IAAI,QAAQA,EAAK,CACf,KAAK,aAAa,UAAWA,EAAI,KAAK,GAAG,CAAC,EAC1C,KAAK,WAAW,aAAa,KAAK,KAAK,CACzC,CAEA,IAAI,QAAS,CACX,OAAO,KAAK,MAAM,MAAM,MAC1B,CAEA,IAAI,OAAOA,EAAK,CACV,CAACA,GAAOA,EAAI,SAAW,EACzB,KAAK,gBAAgB,QAAQ,EAE7B,KAAK,aAAa,SAAUA,EAAI,KAAK,GAAG,CAAC,EAE3C,KAAK,WAAW,aAAa,KAAK,KAAK,CACzC,CAEA,IAAI,MAAO,CACT,OAAO,KAAK,MAAM,MAAM,IAC1B,CAEA,IAAI,KAAKA,EAAK,CACRA,EACF,KAAK,aAAa,OAAQ,EAAE,EAE5B,KAAK,gBAAgB,MAAM,EAE7B,KAAK,WAAW,aAAa,KAAK,KAAK,CACzC,CAEA,IAAI,UAAW,CACb,OAAO,KAAK,MAAM,MAAM,QAC1B,CAEA,IAAI,SAASA,EAAK,CAChB,KAAK,aAAa,YAAaA,EAAI,SAAS,CAAC,EAC7C,KAAK,WAAW,aAAa,KAAK,KAAK,CACzC,CAEA,IAAI,MAAO,CACT,OAAO,KAAK,MAAM,MAAM,IAC1B,CAEA,IAAI,KAAKA,EAAK,CACZ,KAAK,aAAa,OAAQA,EAAI,KAAK,GAAG,CAAC,EACvC,KAAK,WAAW,aAAa,KAAK,KAAK,CACzC,CAEA,IAAI,SAAU,CACZ,OAAO,KAAK,MAAM,MAAM,OAC1B,CAEA,IAAI,QAAQA,EAAK,CACf,KAAK,aAAa,UAAWA,EAAI,SAAS,CAAC,EAC3C,KAAK,WAAW,aAAa,KAAK,KAAK,CACzC,CAEA,IAAI,QAAS,CACX,OAAO,KAAK,MAAM,MAAM,MAC1B,CAEA,IAAI,OAAOA,EAAK,CACd,KAAK,aAAa,SAAUA,EAAI,KAAK,GAAG,CAAC,EACzC,KAAK,WAAW,aAAa,KAAK,KAAK,CACzC,CAEA,qBAAwBG,GACf,KAAK,KAAK,QAAQ,KAAK,OAAO,EAAE,CAAC,IAAI,KAAK,YAAcA,CAAG,MAChE,KAAK,QAAQ,KAAK,OAAO,EAAE,MAC7B,GAGF,oBAAuBA,GACrB,KAAK,KAAK,QAAQ,KAAK,OAAO,EAAE,EAAIA,EAAM,EAAE,QAC1C,KAAK,cAAgB,KAAK,WAC5B,GAEF,YAAc,IACL,CAAC,GAAG,MAAM,KAAK,cAAgB,CAAC,CAAC,EACrC,IAAI,CAACN,EAAGM,IAAQ,KAAK,qBAAqBA,CAAG,CAAC,EAC9C,KAAK,GAAG,EACR,OACC,CAAC,GAAG,MAAM,KAAK,OAAO,CAAC,EACpB,IAAI,CAACN,EAAGM,IAAQ,KAAK,oBAAoBA,CAAG,CAAC,EAC7C,KAAK,GAAG,CACb,EAGJ,eAAiB,CACfC,EACApB,EACAqB,EACAC,IAEIF,IAAoB,EAClBpB,EAAM,CAAC,IAAM,GAAKsB,EAEbD,EAAW,EAAI,IAAM,GAErBA,EAAW,EAAI,IAAM,GAIzB,IAGT,SAAW,IACT,KAAK,MAEF,IAAI,CAACnB,EAAGC,KAAW,CAAE,SAAUA,EAAO,MAAOD,CAAE,EAAE,EAEjD,OAAQA,GAAM,CAAC,KAAK,QAAU,KAAK,OAAO,QAAQA,EAAE,KAAK,IAAM,EAAE,EAEtE,uBAAuBI,EAAkBiB,EAA6B,CAC1C,KAAK,aAAajB,CAAQ,GAIpD,KAAK,aAAaA,EAAUiB,CAAY,CAC1C,CAEA,yBAAyBjB,EAAkBkB,EAAgBC,EAAgB,CACzE,GAAI,EAAAD,IAAWC,GAAU,KAAK,gBAE9B,OAAQnB,EAAU,CAChB,IAAK,kBACH,KAAK,MAAM,iBAAiB,SAASmB,CAAM,CAAC,EAC5C,MACF,IAAK,QACH,KAAK,MAAM,SAAS,KAAK,oBAAoBA,CAAM,CAAC,EACpD,MACF,IAAK,UACH,KAAK,MAAM,WAAW,KAAK,oBAAoBA,CAAM,CAAC,EACtD,MACF,IAAK,SACH,KAAK,MAAM,UAAU,KAAK,oBAAoBA,CAAM,CAAC,EACrD,MACF,IAAK,OACH,KAAK,MAAM,QAAQA,IAAW,IAAI,EAClC,MACF,IAAK,YACH,KAAK,MAAM,YAAY,SAASA,CAAM,CAAC,EACvC,MACF,IAAK,UACH,KAAK,MAAM,WAAW,SAASA,CAAM,CAAC,EACtC,MACF,IAAK,SACH,KAAK,MAAM,UAAUC,EAAWD,CAAM,CAAC,EACvC,KACJ,CACF,CAEA,SAAW,IACF;AAAA;AAAA;AAAA;AAAA;AAAA,wBAKa,GAAK,KAAK,YAAc,KAAK,aAAa;AAAA;AAAA;AAAA;AAAA,gCAIlC,KAAK,gBAAgB,KAC/C,KAAK,gBACP;AAAA,UACM,KAAK,WAAW,CAAC;AAAA,UACjB,KAAK,YAAY,CAAC;AAAA,UAClB,KAAK,UAAU,CAAC;AAAA;AAAA;AAAA,IAMxB,WAAa,IAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAOR,KAAK,YAAY,CAAC;AAAA;AAAA,QAGvB,KAAK,WAAa,EACd,KAAK,mBAAmB,EACxB,KAAK,mBAAmB,CAC9B;AAAA,QACE,KAAK,aAAa,CAAC;AAAA;AAAA,IAIzB,mBAAqB,IACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAME,KAAK,QAAQ,KAAK,OAAO,EAAE,CAAC,QACnC,KAAK,QAAQ,KAAK,OAAO,EAAE,MAC7B;AAAA;AAAA,IAKF,mBAAqB,IAAM;AAAA;AAAA,mBAEV,KAAK,gBAAgB;AAAA;AAAA;AAAA,WAG7B,KAAK,eACR,KAAK,QACL,KAAK,MACL,KAAK,SACL,KAAK,IACP,CAAC;AAAA,WACI,KAAK,YAAc,EAAI,KAAK,iBAAmB,CAAC;AAAA;AAAA,QAEnD,GAAG,KAAK,QAAQ,IAAI;AAAA;AAAA,IAI1B,aAAe,IAAM;AAAA;AAAA,QAEf,KAAK,OAAO,MAAM,EAAE,IAEpB,CAACE,EAAMxB,IAAU;AAAA;AAAA,eAEVwB,EAAOxB,CAAK;AAAA;AAAA;AAAA;AAAA;AAAA,aAKd,KAAK,QAAQ,KAAK,OAAO,EAAE,EAAIA,EAAQ,EAAE;AAAA,aACzC,KAAK,YAAc,KAAK,cAAgB,KAAK,iBAAmB,CAAC;AAAA;AAAA,UAEpEwB,CAAI;AAAA;AAAA,OAGR,CAAC;AAAA;AAAA,IAIL,YAAc,IACP,KAAK,OAEH,GAAG,KAAK,OAAO,IAAI,CAAC1B,EAAOE,IAChC,KAAK,kBAAkBF,EAAOE,CAAK,CACrC,CAAC,GAJwB,GAO3B,kBAAoB,CAACF,EAAeE,IAAkB,CAIpD,IAAMJ,EAAU,KAAK,MAAM,OACrB6B,EAAa,KAAK,WAAW,KAAK,MAAO3B,CAAK,EAEpD,GAAI2B,EAAW,SAAW,EAAG,MAAO,GAEpC,IAAMC,EAAUD,EAAW,CAAC,EAAE,SAExBE,GADUF,EAAWA,EAAW,OAAS,CAAC,EAAE,SACzBC,GAAW,GAC9BE,EAAI,KAAK,cAAc9B,EAAQ,CAAC,EAEtC,MAAO;AAAA;AAAA,UAGDE,IAAU,GAAK,KAAK,KAChB,KAAK,WAAW,KAAK,QAASyB,CAAU,EACxC,EACN;AAAA;AAAA;AAAA,eAGO,KAAK,cAAc,KAAK,OAAO,EAAEC,CAAO,CAAC;AAAA,eACzCE,CAAC;AAAA,mBACGD,CAAK;AAAA,oBACJ,KAAK,YAAY;AAAA;AAAA;AAAA,KAInC,EAEA,WAAa,CACX/B,EACA6B,IACG;AAAA;AAAA;AAAA,+BAGwB,KAAK,kBAC1B,KAAK,QACL,KAAK,OACP,CAAC,KAAK,KAAK,UAAU,KAAKA,EAAW,CAAC,EAAE,KAAK,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAWzC,KAAK,cAAc7B,CAAO,EAAE,CAAC,CAAC;AAAA;AAAA,kBAEzB,KAAK,QAAU,GAAK,EAAE;AAAA;AAAA,kBAEtB,KAAK,YAAY;AAAA,+BACJ,KAAK,kBAAkBA,EAASA,CAAO,CAAC,KACnE,KAAK,UAAU,KAAK6B,EAAW,CAAC,EAAE,KAAK,EAAI,KAAK,UAClD;AAAA;AAAA;AAAA,+BAG6B,KAAK,kBAAkB,EAAG7B,CAAO,CAAC,KAC7D,KAAK,UAAU,KAAK6B,EAAW,CAAC,EAAE,KAAK,CACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYA,UAAY,IAAM,CAChB,IAAMI,GAAW,IACV,KAAK,OAEH,CACL,GAAG,KAAK,SAAS,EACjB,GAAG,KAAK,OAEL,IAAK/B,GAAU,KAAK,WAAW,KAAK,MAAOA,CAAK,CAAC,EACjD,KAAK,CACV,EAAE,KAAK,CAACgC,EAAGC,IAAMD,EAAE,SAAWC,EAAE,QAAQ,EARf,CAAC,GASzB,EAEGC,EAAO,KAAK,WAAW,iBAAiB,MAAM,EACpD,OAAAA,EAAK,QAASC,GAAQ,CACpBA,EAAI,iBAAiB,UAAYC,GAAM,CACrC,IAAMC,EAAW,MAAM,KAAKH,CAAI,EAAE,QAAQC,CAAG,EAC7C,KAAK,iBAAiBC,EAAGC,CAAQ,CACnC,CAAC,CACH,CAAC,EAEM;AAAA,MACLN,EAAQ,IAAKlB,GAAS,CACtB,IAAMhB,EAAS,KAAK,QAAUgB,EAAK,SAC7ByB,EAAS,KAAK,SAAW,KAAK,QAAQzB,EAAK,QAAQ,EAEzD,OAAOA,EAAK,QAAU,GAClB,KAAK,cAAchB,CAAM,EACzB,KAAK,cAAcgB,EAAMhB,EAAQyC,CAAM,CAC7C,CAAC,CAAC;AAAA,GAEJ,EAEA,cAAiBzC,GAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAQ3B,KAAK,qBAAqBA,EAAQ,KAAK,OAAO,CAAC;AAAA;AAAA;AAAA,IAKxD,cAAgB,CACdgB,EACAhB,EACAyC,IACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAOSzB,EAAK,QAAU,EAAI,cAAgB,MAAM;AAAA,cAC3C,KAAK,qBAAqBhB,EAAQ,KAAK,OAAO,CAAC;AAAA,cAC/C,KAAK,eAAegB,EAAK,KAAK,CAAC;AAAA,aAChCA,EAAK,QAAU,EAAI,KAAK,OAAO,KAAO,KAAK,OAAO,IAAI;AAAA;AAAA,QAG3DyB,GAAUA,EAAS,EACf,KAAK,mBAAmBzB,EAAMhB,EAAQyC,CAAM,EAC5C,EACN;AAAA;AAAA,IAIJ,mBAAqB,CACnBzB,EACAhB,EACAyC,IACG;AAAA;AAAA,mBAEY,KAAK,gBAAgB;AAAA;AAAA;AAAA;AAAA,WAI7B,KAAK,qBAAqBzC,EAAQ,KAAK,OAAO,CAAC;AAAA,WAC/C,KAAK,iBAAiBgB,EAAK,KAAK,CAAC;AAAA;AAAA,QAEpCyB,CAAM;AAAA;AAAA,IAIZ,WAAWD,EAAUE,EAAQ,CAK3B,IAAIC,EAAe,KAAK,MAAMH,CAAQ,EAAIE,EAG1CC,EAAe,KAAK,IAAI,EAAG,KAAK,IAAIA,EAAc,KAAK,aAAa,CAAC,EAGrE,IAAMC,EAAW,CAAC,GAAG,KAAK,KAAK,EAC/BA,EAASJ,CAAQ,EAAIG,EAErB,KAAK,MAAQC,EACb,QAAQ,IAAIA,CAAQ,CACtB,CAEA,SAASvC,EAAO,CACd,IAAMgC,EAAO,KAAK,WAAW,iBAAiB,MAAM,EAChDA,EAAKhC,CAAK,GACZgC,EAAKhC,CAAK,EAAE,MAAM,CAEtB,CAEA,iBAAiBkC,EAAGC,EAAU,CAC5B,IAAMK,EAAMN,EAAE,IACRO,EAAY,KAAK,WAAW,iBAAiB,MAAM,EAAE,OACvDC,EAEJ,OAAQF,EAAK,CACX,IAAK,aACHE,GAAeP,EAAW,GAAKM,EAC/B,KAAK,SAASC,CAAW,EACzB,MACF,IAAK,YACHA,GAAeP,EAAW,EAAIM,GAAaA,EAC3C,KAAK,SAASC,CAAW,EACzB,MACF,IAAK,UACH,KAAK,WAAWP,EAAU,EAAE,EAC5B,MACF,IAAK,YACH,QAAQ,IAAI,MAAM,EAClB,KAAK,WAAWA,EAAU,CAAC,EAC3B,KACJ,CACF,CAEA,iBAAoBQ,GAAc,CAChC,IAAMC,EAAkB,OAAO,OAAO,KAAK,UAAU,MAAM,EAAE,MAC3D,EACA,KAAK,OACP,EACMC,EAAgBD,EAAgB,OAAO,CAACE,EAAMC,IAClD,KAAK,IAAIA,EAAO,KAAK,iBAAmBJ,CAAC,EACzC,KAAK,IAAIG,EAAO,KAAK,iBAAmBH,CAAC,EACrCI,EACAD,CACN,EACA,OAAOF,EAAgB,QAAQC,CAAa,EAAI,CAClD,EAEA,eAAkBjB,GAAc,CAC9B,IAAMoB,EAAgB,OAAO,OAAO,KAAK,UAAU,IAAI,EAAE,MACvD,EACA,KAAK,cAAgB,CACvB,EACMC,EAAcD,EAAc,OAAO,CAACF,EAAMC,IAC9C,KAAK,IAAIA,EAAO,KAAK,iBAAmBnB,CAAC,EACzC,KAAK,IAAIkB,EAAO,KAAK,iBAAmBlB,CAAC,EACrCmB,EACAD,CACN,EACA,OAAOE,EAAc,QAAQC,CAAW,CAC1C,EAEA,gBAAmBf,GAAkB,CACnC,IAAMgB,EAAa,KAAK,YAAY,cAAc,KAAK,EACvD,GAAI,CAACA,EAAY,OAEjB,IAAMC,EAAKD,EAAW,eAAe,EACrCC,EAAG,EAAIjB,EAAE,QACTiB,EAAG,EAAIjB,EAAE,QAET,IAAMkB,EAAWD,EAAG,gBAAgBD,EAAW,aAAa,GAAG,QAAQ,CAAC,EAClEL,EAAgB,KAAK,iBAAiBO,EAAS,CAAC,EAChDH,EAAc,KAAK,eAAeG,EAAS,CAAC,EAE5CC,EAAc,KAAK,QAAUR,EAE7BN,EAAW,CAAC,GAAG,KAAK,KAAK,EACzBe,EAAY,IAAI,IAAI,KAAK,MAAM,EAGjCL,IAAgB,EACd,KAAK,MAAMI,CAAW,IAAM,EAC9Bd,EAASc,CAAW,EAAI,GAExBd,EAASc,CAAW,EAAI,EAG1Bd,EAASc,CAAW,EAAIJ,EAG1B,KAAK,UAAY,CACf,OAAQI,EACR,KAAMJ,EACN,UAAWV,EAASc,CAAW,CACjC,EAEA,KAAK,eAAiB,CAAC,GAAG,KAAK,MAAM,EACrC,KAAK,cAAgB,CAAC,GAAG,KAAK,KAAK,EAGnCC,EAAU,QAASxD,GAAU,CACTyC,EAAS,OAAQ5B,GAASA,IAASb,CAAK,EAAE,OAC5C,GACdwD,EAAU,OAAOxD,CAAK,CAE1B,CAAC,EAEIyD,EAAchB,EAAU,KAAK,KAAK,IACrC,KAAK,MAAQA,GAGVgB,EAAc,MAAM,KAAKD,CAAS,EAAG,KAAK,MAAM,IACnD,KAAK,OAAS,MAAM,KAAKA,CAAS,GAGpC,KAAK,YAAY,iBAAiB,YAAa,KAAK,eAAe,EACnE,SAAS,iBAAiB,UAAW,KAAK,aAAa,CACzD,EAEA,gBAAmBpB,GAAkB,CACnC,GAAI,CAAC,KAAK,UAAW,OAErB,IAAMgB,EAAa,KAAK,YAAY,cAAc,KAAK,EACvD,GAAI,CAACA,EAAY,OAEjB,IAAMC,EAAKD,EAAW,eAAe,EACrCC,EAAG,EAAIjB,EAAE,QACTiB,EAAG,EAAIjB,EAAE,QAET,IAAMkB,EAAWD,EAAG,gBAAgBD,EAAW,aAAa,GAAG,QAAQ,CAAC,EAClEM,EAAgB,KAAK,iBAAiBJ,EAAS,CAAC,EAChDK,EAAc,KAAK,UAAU,UAE7BC,EAAmB,KAAK,UAAU,OAClCC,EAAqB,KAAK,QAAUH,EACpCI,EAAiB,KAAK,IAAIF,EAAkBC,CAAkB,EAC9DE,EAAiB,KAAK,IAAIH,EAAkBC,CAAkB,EAE9DpB,EAAW,CAAC,GAAG,KAAK,aAAa,EACjCe,EAAY,IAAI,IAAI,KAAK,cAAc,EAG7C,QAASQ,EAAIF,EAAgBE,GAAKD,EAAgBC,IAChDvB,EAASuB,CAAC,EAAIL,EAEZC,IAAqBC,GACrBF,IAAgB,IAChBA,IAAgB,GAEhBH,EAAU,IAAIG,CAAW,EAK7BH,EAAU,QAASxD,GAAU,CACTyC,EAAS,OAAQ5B,GAASA,IAASb,CAAK,EAAE,OAC5C,GACdwD,EAAU,OAAOxD,CAAK,CAE1B,CAAC,EAED,IAAMiE,EAAgB,MAAM,KAAKT,CAAS,EAGrCC,EAAchB,EAAU,KAAK,KAAK,IACrC,KAAK,MAAQA,GAGVgB,EAAcQ,EAAe,KAAK,MAAM,IAC3C,KAAK,OAASA,EAElB,EAEA,cAAiB7B,GAAkB,CACjC,KAAK,YAAY,oBAAoB,YAAa,KAAK,eAAe,EACtE,SAAS,oBAAoB,UAAW,KAAK,aAAa,EAC1D,KAAK,UAAY,KACjB,KAAK,cAAgB,CAAC,EACtB,KAAK,eAAiB,CAAC,CACzB,CACF,EAEA,OAAO,eAAe,OAAO,uBAAwBxC,CAAkB",
  "names": ["guitar_chord_diagram_exports", "__toCommonJS", "e", "n", "i", "t", "o", "n", "i", "e", "l", "u", "c", "d", "a", "e", "f", "n", "i", "h", "m", "g", "p", "b", "y", "t", "l", "s", "r", "o", "v", "N", "w", "DEFAULT_STATE", "compareArrays", "a", "b", "splitArray", "value", "GuitarChordDiagram", "string", "strings", "frets", "barre", "f", "index", "value", "v", "attrName", "DEFAULT_STATE", "l", "state", "validatedValue", "fretsLargerThanAmountOfFrets", "finalValue", "_", "fret", "w", "val", "parsedValue", "valid", "pos", "amountOfStrings", "baseFret", "showCapo", "defaultValue", "oldVal", "newVal", "splitArray", "note", "barreFrets", "string1", "width", "y", "allDots", "a", "b", "dots", "dot", "e", "dotIndex", "finger", "change", "newFretValue", "newFrets", "key", "totalDots", "newDotIndex", "x", "stringPositions", "closestString", "prev", "curr", "fretPositions", "closestFret", "svgElement", "pt", "cursorpt", "stringIndex", "newBarres", "compareArrays", "currentString", "currentFret", "startStringIndex", "currentStringIndex", "minStringIndex", "maxStringIndex", "i", "updatedBarres"]
}
